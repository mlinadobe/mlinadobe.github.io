"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ModalManager2 = _interopRequireDefault(require("react-overlays/lib/ModalManager"));

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
// needed for the modal manager class
var SpectrumModalManager =
/*#__PURE__*/
function (_ModalManager) {
  (0, _inherits2["default"])(SpectrumModalManager, _ModalManager);

  function SpectrumModalManager() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, SpectrumModalManager);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(SpectrumModalManager)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "overflowMap", new Map());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "superAdd", _this.add);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "superRemove", _this.remove);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "add", function (modal, container, className, isOverlay) {
      _this.superAdd(modal, container, className);

      _this.hideBodyOverflow(modal, isOverlay);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "hideBodyOverflow", function (modal, isOverlay) {
      var currentBodyOverflow = getComputedStyle(document.body).overflow; // if it's not an overlay, it's a modal and scrolling should be disabled (i know, it's weird to think about)

      if (!isOverlay && currentBodyOverflow !== 'hidden') {
        _this.overflowMap.set(modal, currentBodyOverflow);

        document.body.style.overflow = 'hidden';
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "remove", function (modal, container, className) {
      _this.superRemove(modal, container, className);

      _this.resetBodyOverflow(modal);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "resetBodyOverflow", function (modal) {
      if (_this.overflowMap.has(modal)) {
        document.body.style.overflow = _this.overflowMap.get(modal);

        _this.overflowMap["delete"](modal);
      }
    });
    return _this;
  }

  (0, _createClass2["default"])(SpectrumModalManager, [{
    key: "addToModal",
    value: function addToModal(child) {
      var isOverlay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var hideSiblingNodes = this.hideSiblingNodes;
      this.hideSiblingNodes = false;
      this.add(child, document.body, null, isOverlay);
      this.hideSiblingNodes = hideSiblingNodes;
    }
  }, {
    key: "removeFromModal",
    value: function removeFromModal(child) {
      var hideSiblingNodes = this.hideSiblingNodes;
      this.hideSiblingNodes = false;
      this.remove(child);
      this.hideSiblingNodes = hideSiblingNodes;
    }
  }]);
  return SpectrumModalManager;
}(_ModalManager2["default"]);

exports["default"] = SpectrumModalManager;