"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
var children = {};
/*
 * A global portal that lives in the document body which can be used to add
 * overlays like modals outside the normal React component tree.
 */

var PortalContainer =
/*#__PURE__*/
function () {
  function PortalContainer() {
    (0, _classCallCheck2["default"])(this, PortalContainer);
  }

  (0, _createClass2["default"])(PortalContainer, null, [{
    key: "add",

    /**
     * Renders the child
     * @param child component to be render
     * @param context Parent with the context
     */
    value: function add(child, context) {
      var node = children[child.key] || document.createElement('div');

      if (!context) {
        _reactDom["default"].render(child, node);
      } else {
        _reactDom["default"].unstable_renderSubtreeIntoContainer(context, child, node);
      }

      children[child.key] = node;
    }
    /**
     * Remove child from the dom
     * @param child
     */

  }, {
    key: "remove",
    value: function remove(child) {
      _reactDom["default"].unmountComponentAtNode(children[child.key]);

      delete children[child.key];
    }
    /**
     * Remove all portals from the dom
     */

  }, {
    key: "removeAll",
    value: function removeAll() {
      for (var child in children) {
        // skip loop if the property is from prototype
        if (!children.hasOwnProperty(child)) {
          continue;
        }

        _reactDom["default"].unmountComponentAtNode(children[child]);

        delete children[child];
      }
    }
  }]);
  return PortalContainer;
}();

exports["default"] = PortalContainer;