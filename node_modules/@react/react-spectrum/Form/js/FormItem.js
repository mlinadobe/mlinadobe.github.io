"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _LabelBase = _interopRequireDefault(require("../../FieldLabel/js/LabelBase"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
var FormItem =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(FormItem, _Component);

  function FormItem() {
    (0, _classCallCheck2["default"])(this, FormItem);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(FormItem).apply(this, arguments));
  }

  (0, _createClass2["default"])(FormItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          labelAlign = _this$props.labelAlign,
          labelFor = _this$props.labelFor,
          necessity = _this$props.necessity,
          necessityIndicator = _this$props.necessityIndicator,
          className = _this$props.className,
          children = _this$props.children,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["label", "labelAlign", "labelFor", "necessity", "necessityIndicator", "className", "children"]);
      var labelClassNames = (0, _classnames["default"])('spectrum-Form-itemLabel', "spectrum-FieldLabel--".concat(labelAlign));
      return _react["default"].createElement(_LabelBase["default"], (0, _extends2["default"])({
        label: label,
        className: (0, _classnames["default"])('spectrum-Form-item', className),
        labelClassName: labelClassNames,
        wrapperClassName: "spectrum-Form-itemField",
        labelFor: labelFor,
        necessity: necessity,
        necessityIndicator: necessityIndicator,
        componentName: "FormItem"
      }, otherProps), children);
    }
  }]);
  return FormItem;
}(_react.Component);

exports["default"] = FormItem;
(0, _defineProperty2["default"])(FormItem, "propTypes", {
  /** Label for form field. Can be Text of HTML */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),

  /** Label Alignment. Defaults to left */
  labelAlign: _propTypes["default"].oneOf(['left', 'right']),

  /** Id of the labelable form element */
  labelFor: _propTypes["default"].string,

  /**
   * Style for communicating whether the associated input is required or optional.
   */
  necessity: _propTypes["default"].oneOf(['required', 'optional']),

  /**
   * 'icon' adds an asterix to the field label if necessity is required.
   * 'label' adds a '(required)' or '(optional)' string to the label depending on the necessity.
   */
  necessityIndicator: _propTypes["default"].oneOf(['icon', 'label'])
});
(0, _defineProperty2["default"])(FormItem, "defaultProps", {
  labelAlign: 'left',
  necessityIndicator: 'icon'
});