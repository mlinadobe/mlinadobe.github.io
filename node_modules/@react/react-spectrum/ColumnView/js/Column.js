"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _collectionView = require("@react/collection-view");

var _Item = _interopRequireDefault(require("./Item"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _class, _class2, _temp;

var Column =
/*
 * An individual column in a ColumnView
 */
(0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(Column, _React$Component);

  function Column(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Column);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Column).call(this, props));
    _this.layout = new _collectionView.ListLayout({
      rowHeight: 44
    });
    return _this;
  }

  (0, _createClass2["default"])(Column, [{
    key: "focus",
    value: function focus() {
      try {
        var indexPath = this.collection.selectedIndexPaths.firstIndexPath;
        this.collection.scrollToItem(indexPath);
        this.collection.focusItem(indexPath);
      } catch (err) {// ignore errors in tests
      }
    }
  }, {
    key: "onFocus",
    value: function onFocus(e) {
      var _this2 = this;

      if (this.props.onFocus) {
        this.props.onFocus(e);
      } // Ignore this focus event if it is the entire collection-view that is
      // focusing rather than an individual item.


      if (e.target === this.collection.getDOMNode()) {
        return;
      } // Wait until collection-view updates


      requestAnimationFrame(function () {
        // If the focused item is not selected, select it.
        var focusedIndexPath = _this2.collection && _this2.collection.focusedIndexPath;

        if (!_this2.collection.selectedIndexPaths.contains(focusedIndexPath)) {
          _this2.collection.selectItem(focusedIndexPath);
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          dataSource = _this$props.dataSource,
          item = _this$props.item,
          allowsSelection = _this$props.allowsSelection,
          _this$props$level = _this$props.level,
          level = _this$props$level === void 0 ? 0 : _this$props$level; // Find IndexPaths for the items that should be highlighted.
      // If this is the last column, nothing should be highlighted.
      // Otherwise, highlight the navigated item in that column.
      // Multi-select behavior is handled internally by the collection-view. See onHighlightChange.

      var highlightedIndexPaths = [];
      var stack = dataSource.navigationStack;

      if (level !== stack.length - 1) {
        // Find the index of the navigated child (which should be next in the stack).
        var navigatedItem = stack[level + 1];

        if (navigatedItem) {
          highlightedIndexPaths.push(new _collectionView.IndexPath(0, navigatedItem.index));
        }
      }

      var ariaLabelledby = level > 0 ? item.getItemId() : this.props['aria-labelledby'];
      return _react["default"].createElement(_collectionView.EditableCollectionView, {
        className: (0, _classnames["default"])('spectrum-MillerColumns-item spectrum-AssetList'),
        dataSource: item.children,
        layout: this.layout,
        delegate: this,
        onSelectionChanged: this.onHighlightChange,
        selectedIndexPaths: highlightedIndexPaths,
        allowsMultipleSelection: allowsSelection,
        ref: function ref(c) {
          return _this3.collection = c;
        },
        role: "group",
        id: item.getColumnId(),
        "aria-label": this.props['aria-label'],
        "aria-labelledby": ariaLabelledby,
        onKeyDown: this.onKeyDown,
        onFocus: this.onFocus
      });
    }
  }, {
    key: "onHighlightChange",
    value: function onHighlightChange() {
      if (!this.collection) {
        return;
      } // If there is 1 item highlighted, navigate to it.
      // If there are no items highlighted, navigate to the parent.
      // Otherwise, do nothing and let the collection-view manage the multiple highlighting behavior.


      var highlighted = Array.from(this.collection.selectedIndexPaths);

      if (highlighted.length <= 1) {
        var item = highlighted.length === 1 ? this.collection.getItem(highlighted[0]) : this.props.item;
        this.props.dataSource.navigateToItem(item.item);
      }
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(e) {
      switch (e.key) {
        case 'Enter':
        case ' ':
          return this.commitSelection();

        case 'ArrowLeft':
          return this.props.dataSource.navigateToPrevious();

        case 'ArrowRight':
          return this.props.dataSource.navigateToNext();

        case 'Escape':
        case 'Esc':
          e.preventDefault();
          return;
      }
    }
  }, {
    key: "commitSelection",
    value: function commitSelection() {
      var _this4 = this;

      if (!this.props.allowsSelection) {
        return;
      } // Get highlighted items from the collection-view


      var highlighted = Array.from(this.collection.selectedIndexPaths).map(function (indexPath) {
        return _this4.collection.getItem(indexPath);
      }); // Filter out branches if they cannot be selected

      if (!this.props.allowsBranchSelection) {
        highlighted = highlighted.filter(function (item) {
          return !item.hasChildren;
        });
      }

      if (highlighted.length > 0) {
        // If all of the items have the same selection status, toggle it.
        // Otherwise, if some items are selected, and some not, select them all.
        var value = !highlighted.map(function (item) {
          return _this4.props.dataSource.isSelected(item.item);
        }).reduce(function (prev, selected) {
          return prev === selected ? prev : false;
        });
        this.props.dataSource.setSelected(highlighted.map(function (h) {
          return h.item;
        }), value);
      }
    }
  }, {
    key: "renderItemView",
    value: function renderItemView(type, item) {
      var _this$props2 = this.props,
          renderItem = _this$props2.renderItem,
          allowsSelection = _this$props2.allowsSelection,
          allowsBranchSelection = _this$props2.allowsBranchSelection,
          dataSource = _this$props2.dataSource,
          detailNode = _this$props2.detailNode,
          level = _this$props2.level;
      return _react["default"].createElement(_Item["default"], {
        level: level,
        column: this,
        item: item,
        renderItem: renderItem,
        allowsSelection: allowsSelection,
        allowsBranchSelection: allowsBranchSelection,
        isSelected: dataSource.isSelected(item.item),
        detailNode: detailNode,
        onSelect: this.onSelect.bind(this, item.item)
      });
    }
  }, {
    key: "onSelect",
    value: function onSelect(item, selected) {
      this.props.dataSource.setSelected([item], selected);
    }
  }]);
  return Column;
}(_react["default"].Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /*
   * An instance of an EventEmitter. Usually a ColumnViewDataSource.
   */
  dataSource: _propTypes["default"].object,

  /*
   * Item to be rendered.
   */
  item: _propTypes["default"].any,

  /*
   * Determines if a checkbox should be rendered.
   */
  allowsSelection: _propTypes["default"].bool,

  /*
   * Determines if a checkbox should be rendered on chevron sections.
   */
  allowsBranchSelection: _propTypes["default"].bool,

  /*
   * Custom rendering function for the item contents.
   */
  renderItem: _propTypes["default"].func
}), _temp)) || _class;

exports["default"] = Column;