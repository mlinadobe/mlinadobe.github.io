"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _collectionView = require("@react/collection-view");

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
// symbol + counter for requests
var REQUEST_ID = 1;
var LAST_REQUEST = Symbol('lastRequest');
/**
 * ListDataSource is a common data source used by views that load a list of data.
 * It supports async loading, infinite scrolling, and sorting data.
 * Used by TableView and GridView.
 */

var ListDataSource =
/*#__PURE__*/
function (_ArrayDataSource) {
  (0, _inherits2["default"])(ListDataSource, _ArrayDataSource);

  function ListDataSource(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, ListDataSource);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ListDataSource).call(this, props));
    _this[LAST_REQUEST] = 0;
    return _this;
  }
  /**
   * Called on initial load to get the initial items to display,
   * which are inserted into a single section. Should be overridden to return an array of items.
   * If you need to load multiple sections of data, override `performLoad` instead.
   * @abstract
   * @param {?object} sortDescriptor - When called by a TableView, contains the sort column and direction
   * @return {Array}
   */


  (0, _createClass2["default"])(ListDataSource, [{
    key: "load",
    value: function () {
      var _load = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(sortDescriptor) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function load(_x) {
        return _load.apply(this, arguments);
      }

      return load;
    }()
    /**
     * Called when scrolling near the bottom of a list. You can use this
     * opportunity to load more data, e.g. for infinite scrolling. The array of
     * items you return will be appended to the last section.
     * If you need to load multiple sections of data, override `performLoadMore` instead.
     * @abstract
     * @return {Array}
     */

  }, {
    key: "loadMore",
    value: function () {
      var _loadMore = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function loadMore() {
        return _loadMore.apply(this, arguments);
      }

      return loadMore;
    }()
    /**
     * Triggers loading of data. You should call `insertSection` or `insertItems`
     * as needed to add the loaded data into view. By default, calls `load` to get
     * data for a single section.
     * @param {?object} sortDescriptor - When called by a TableView, contains the sort column and direction
     */

  }, {
    key: "performLoad",
    value: function () {
      var _performLoad = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3(sortDescriptor) {
        var requestId, items;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                requestId = REQUEST_ID++;
                this[LAST_REQUEST] = requestId;
                this.clear(false);
                _context3.next = 5;
                return this.load(sortDescriptor);

              case 5:
                items = _context3.sent;

                // insert items only if it's the last request that's been made
                if (this[LAST_REQUEST] === requestId && items) {
                  this.insertSection(0, items.slice(), false);
                }

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function performLoad(_x2) {
        return _performLoad.apply(this, arguments);
      }

      return performLoad;
    }()
    /**
     * Triggers a reload of the data in the attached view. Will cause the contents of the view
     * to be cleared and `performLoad` to be called again. You should not call `performLoad`
     * directly since that will not allow the view an opportunity to display its loading spinner.
     */

  }, {
    key: "reloadData",
    value: function reloadData() {
      this.emit('reloadData');
    }
    /**
     * Triggers loading of more data when when scrolling near the bottom of a list.
     * You should call `insertSection` or `insertItems` as needed to add the loaded data into view.
     * Returns whether more data was successfully inserted. If you return false, the view will
     * assume that all data has already been loaded and will stop calling `performLoadMore`.
     * By default, calls `loadMore` to get data for a single section.
     * @abstract
     * @return {boolean} - Whether more data was inserted.
     */

  }, {
    key: "performLoadMore",
    value: function () {
      var _performLoadMore = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4() {
        var requestId, items;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                requestId = REQUEST_ID++;
                this[LAST_REQUEST] = requestId;
                _context4.next = 4;
                return this.loadMore();

              case 4:
                items = _context4.sent;

                if (!(items && items.length > 0)) {
                  _context4.next = 8;
                  break;
                }

                if (this[LAST_REQUEST] === requestId) {
                  this.insertItems(new _collectionView.IndexPath(0, this.sections[this.sections.length - 1].length), items.slice(), false);
                }

                return _context4.abrupt("return", true);

              case 8:
                return _context4.abrupt("return", false);

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function performLoadMore() {
        return _performLoadMore.apply(this, arguments);
      }

      return performLoadMore;
    }()
    /**
     * Performs sorting of the data. By default, calls `performLoad` to reload the data
     * with the new sort descriptor.
     * @param {object} sortDescriptor - Contains the sort column and direction
     */

  }, {
    key: "performSort",
    value: function () {
      var _performSort = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee5(sortDescriptor) {
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.performLoad(sortDescriptor);

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function performSort(_x3) {
        return _performSort.apply(this, arguments);
      }

      return performSort;
    }()
  }]);
  return ListDataSource;
}(_collectionView.ArrayDataSource);

exports["default"] = ListDataSource;