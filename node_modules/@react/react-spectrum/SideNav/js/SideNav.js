"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _events = require("../../utils/events");

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _FocusManager = _interopRequireDefault(require("../../utils/FocusManager"));

var _focusRing = _interopRequireDefault(require("../../utils/focusRing"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

require("../style/index.css");

var _class, _class2, _temp;

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/sidenav/index.css");

  require("../../spectrum-css/sidenav/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/sidenav/index-lg.css");
} else {
  require("../../spectrum-css/sidenav/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/sidenav/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/sidenav/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/sidenav/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/sidenav/multiStops/darkest.css");
var SIDENAV_ITEM_SELECTOR = '.spectrum-SideNav-itemLink:not(.is-hidden):not(.is-disabled)';
var SELECTED_SIDENAV_ITEM_SELECTOR = SIDENAV_ITEM_SELECTOR + '.is-selected';

var isNestedSelected = function isNestedSelected(props, value) {
  return props.children && props.children.filter(function (c) {
    var children = c.props.children;

    if (children && typeof children !== 'string') {
      return isNestedSelected(c.props, value);
    }

    return c.props.value === value;
  }).length !== 0;
};

var SideNav = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (0, _focusRing["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(SideNav, _Component);

  function SideNav(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, SideNav);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(SideNav).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      value: _this.props.defaultValue || _this.props.value
    });
    _this.id = (0, _createId["default"])();
    return _this;
  }

  (0, _createClass2["default"])(SideNav, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var value = nextProps.value;

      if (value !== this.props.value) {
        this.setState({
          value: value
        });
      }
    }
  }, {
    key: "isSelected",
    value: function isSelected(child) {
      return child.props.value === this.state.value;
    }
  }, {
    key: "isDefaultSelected",
    value: function isDefaultSelected(child) {
      return child.props.value === this.props.defaultValue;
    }
  }, {
    key: "onSelect",
    value: function onSelect(value, e) {
      if (this.props.value === undefined) {
        this.setState({
          value: value
        });
      }

      this.props.onSelect(value, e);
    }
  }, {
    key: "isDefaultExpanded",
    value: function isDefaultExpanded(child) {
      if (child.props.defaultExpanded !== undefined) {
        return child.props.defaultExpanded;
      } // Expand nested sidenav if any item is selected


      return Array.isArray(child.props.children) && isNestedSelected(child.props, this.state.value);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          children = _this$props.children,
          hidden = _this$props.hidden,
          variant = _this$props.variant,
          _this$props$id = _this$props.id,
          id = _this$props$id === void 0 ? this.id : _this$props$id,
          manageTabIndex = _this$props.manageTabIndex,
          typeToSelect = _this$props.typeToSelect,
          _this$props$ariaLevel = _this$props.ariaLevel,
          ariaLevel = _this$props$ariaLevel === void 0 ? 1 : _this$props$ariaLevel,
          autoFocus = _this$props.autoFocus,
          isNested = _this$props.isNested,
          ariaLabel = _this$props['aria-label'],
          ariaLabelledby = _this$props['aria-labelledby'],
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["className", "children", "hidden", "variant", "id", "manageTabIndex", "typeToSelect", "ariaLevel", "autoFocus", "isNested", "aria-label", "aria-labelledby"]);
      var isMultiLevel = variant === 'multiLevel';
      var Element = isNested ? 'div' : 'nav';
      delete otherProps.value;

      var ul = _react["default"].createElement("ul", (0, _extends2["default"])({
        className: (0, _classnames["default"])('spectrum-SideNav', {
          'spectrum-SideNav--multiLevel': isMultiLevel
        }),
        id: id + '-list',
        "aria-label": isNested ? ariaLabel : undefined,
        "aria-labelledby": isNested ? ariaLabelledby : undefined
      }, (0, _filterDOMProps["default"])(otherProps)), _react.Children.map(children, function (child) {
        return (0, _react.cloneElement)(child, {
          hidden: hidden,
          manageTabIndex: manageTabIndex,
          isMultiLevel: isMultiLevel,
          ariaLevel: isMultiLevel ? ariaLevel : undefined,
          _nestedNavValue: _this2.state.value,
          _isSelected: _this2.isSelected(child),
          onSelect: (0, _events.chain)(child.props.onSelect, _this2.onSelect),
          defaultExpanded: _this2.isDefaultExpanded(child)
        });
      })); // If this is the root sidenav and we are managing focus, wrap the list in a toolbar


      if (!isNested) {
        ul = _react["default"].createElement("div", {
          role: "toolbar",
          "aria-orientation": "vertical"
        }, ul);
      }

      return _react["default"].createElement(Element, {
        id: id,
        hidden: hidden,
        "aria-hidden": hidden,
        role: isNested ? 'presentation' : undefined,
        "aria-label": !isNested ? ariaLabel : undefined,
        "aria-labelledby": !isNested ? ariaLabelledby : undefined,
        className: (0, _classnames["default"])(className, 'react-spectrum-SideNav')
      }, isNested ? ul : _react["default"].createElement(_FocusManager["default"], {
        itemSelector: SIDENAV_ITEM_SELECTOR,
        selectedItemSelector: SELECTED_SIDENAV_ITEM_SELECTOR,
        manageTabIndex: isMultiLevel || manageTabIndex,
        typeToSelect: isMultiLevel || typeToSelect,
        autoFocus: autoFocus
      }, ul));
    }
  }]);
  return SideNav;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /**
   * The variant of sidenav to display
   */
  variant: _propTypes["default"].oneOf(['default', 'multiLevel']),

  /**
   * Whether SideNav should use roving tabIndex so that only one item can receive focus at a time. With multiLevel, this defaults to true.
   */
  manageTabIndex: _propTypes["default"].bool,

  /**
   * Whether SideNav should use alphanumeric search to locate next item to focus. With multiLevel, this defaults to true.
   */
  typeToSelect: _propTypes["default"].bool,

  /**
   * Custom className of sidenav to apply
   */
  className: _propTypes["default"].string,

  /**
   * Value of selected Sidenav Item (use for controlled selection)
   */
  value: _propTypes["default"].string,

  /**
   * Value of selected Sidenav Item at initialization
   */
  defaultValue: _propTypes["default"].string,

  /**
   * Whether to automatically set focus to the seleted item when the component mounts.
   */
  autoFocus: _propTypes["default"].bool,

  /**
   * Whether the sidenav is a child of a sidenav item
   */
  isNested: _propTypes["default"].bool,

  /**
   * A select handler for the sidenav
   */
  onSelect: _propTypes["default"].func
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  variant: 'default',
  manageTabIndex: false,
  typeToSelect: false,
  autoFocus: false,
  isNested: false,
  onSelect: function onSelect() {}
}), _temp)) || _class) || _class) || _class;

exports["default"] = SideNav;