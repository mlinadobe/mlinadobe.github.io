"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _events = require("../../utils/events");

var _classnames = _interopRequireDefault(require("classnames"));

var _icon = require("../../utils/icon");

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _focusRing = _interopRequireDefault(require("../../utils/focusRing"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _SideNav = _interopRequireDefault(require("./SideNav"));

var _class, _class2, _temp;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var NOOP = function NOOP() {};

var FOCUSABLE_SIDENAV_ITEMLINK_SELECTOR = '.spectrum-SideNav-itemLink[tabIndex]';
/**
 * An item in a sidenav
 */

var SideNavItem = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (0, _focusRing["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(SideNavItem, _Component);

  function SideNavItem(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, SideNavItem);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(SideNavItem).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      expanded: _this.props.defaultExpanded || _this.props.expanded,
      focused: false
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setSideNavItemRef", function (s) {
      return _this.sideNavItemRef = s;
    });
    _this.id = (0, _createId["default"])();
    return _this;
  }

  (0, _createClass2["default"])(SideNavItem, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var expanded = nextProps.expanded;

      if (expanded !== this.props.expanded) {
        this.setState(function (prevState) {
          return _objectSpread({}, prevState, {
            expanded: expanded
          });
        });
      }
    }
  }, {
    key: "handleClick",
    value: function handleClick(e) {
      this.props.onClick(e);
      this.onSelectFocused(e);
    }
  }, {
    key: "onSelectFocused",
    value: function onSelectFocused(e) {
      var _this$props = this.props,
          onSelect = _this$props.onSelect,
          value = _this$props.value,
          expanded = _this$props.expanded,
          _this$props$href = _this$props.href,
          href = _this$props$href === void 0 ? e.target ? e.target.href : undefined : _this$props$href;
      var isKeyDown = e.type === 'keydown';

      if (!href || isKeyDown) {
        // When there is no href or if triggered from a keyboard event,
        // preventDefault and stopPropagation.
        e.preventDefault();
        e.stopPropagation(); // If Enter of Space key pressed, trigger click event on event target

        if (isKeyDown && (e.key === 'Enter' || e.key === ' ')) {
          e.target.click();
          return;
        }
      }

      if (expanded === undefined) {
        this.setState(function (prevState) {
          return _objectSpread({}, prevState, {
            expanded: !prevState.expanded
          });
        });
      }

      onSelect(value, e);
    }
    /**
     * Keyboard event handler to interperet ArrowLeft/ArrowRight to collapse/expand section in multiLevel variant.
     * @param {KeyboardEvent} e Keyboard event
     */

  }, {
    key: "onKeyDown",
    value: function onKeyDown(e) {
      var isMultiLevel = this.props.isMultiLevel;
      var expanded = this.state.expanded;
      var isExpandableItem = isMultiLevel && this.hasNestedNav;

      switch (e.key) {
        case 'ArrowLeft':
        case 'Left':
          if (isExpandableItem) {
            if (expanded) {
              if (this.sideNavItemRef && this.sideNavItemRef.querySelector(FOCUSABLE_SIDENAV_ITEMLINK_SELECTOR) === document.activeElement) {
                this.onSelectFocused(e);
              } else {
                e.preventDefault();
                e.stopPropagation();
              }

              this.focus();
            }
          }

          break;

        case 'ArrowRight':
        case 'Right':
          if (isExpandableItem) {
            if (!expanded) {
              this.onSelectFocused(e);
            } else if (this.sideNavItemRef) {
              var links = Array.from(this.sideNavItemRef.querySelectorAll(FOCUSABLE_SIDENAV_ITEMLINK_SELECTOR));

              if (links.indexOf(e.target) === 0) {
                links[1].focus();
              }
            }
          }

          break;
      }
    }
  }, {
    key: "onFocus",
    value: function onFocus() {
      this.setState({
        focused: true
      });
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      this.setState({
        focused: false
      });
    }
  }, {
    key: "focus",
    value: function focus() {
      if (this.sideNavItemRef) {
        var link = this.sideNavItemRef.querySelector(FOCUSABLE_SIDENAV_ITEMLINK_SELECTOR);
        link.focus();
      }
    }
  }, {
    key: "getDescendantId",
    value: function getDescendantId(postfix) {
      var _this$props$id = this.props.id,
          id = _this$props$id === void 0 ? this.id : _this$props$id;
      return postfix ? "".concat(id, "-").concat(postfix) : id;
    }
  }, {
    key: "renderLink",
    value: function renderLink(label, tabIndex) {
      var _this$props2 = this.props,
          hidden = _this$props2.hidden,
          _this$props2$id = _this$props2.id,
          id = _this$props2$id === void 0 ? this.id : _this$props2$id,
          icon = _this$props2.icon,
          disabled = _this$props2.disabled,
          href = _this$props2.href,
          renderLink = _this$props2.renderLink,
          isMultiLevel = _this$props2.isMultiLevel,
          target = _this$props2.target,
          _isSelected = _this$props2._isSelected,
          ariaCurrent = _this$props2['aria-current'];
      var _this$state = this.state,
          expanded = _this$state.expanded,
          focused = _this$state.focused;
      var isMultiLevelHeading = this.hasNestedNav && isMultiLevel;
      var role = disabled || !href ? 'link' : undefined;
      var props = {
        href: disabled ? undefined : href,
        onClick: disabled ? undefined : this.handleClick,
        onFocus: disabled ? undefined : this.onFocus,
        onBlur: disabled ? undefined : this.onBlur,
        tabIndex: disabled ? undefined : tabIndex,
        className: (0, _classnames["default"])('spectrum-SideNav-itemLink', {
          'is-selected': _isSelected,
          'is-disabled': disabled,
          'is-focused': focused,
          'is-hidden': hidden
        }),
        id: id,
        role: role,
        'aria-disabled': disabled || undefined,
        'aria-expanded': isMultiLevelHeading ? expanded : undefined,
        'aria-controls': isMultiLevelHeading && expanded ? this.getDescendantId('child-list') : undefined,
        'aria-current': _isSelected && !isMultiLevelHeading ? ariaCurrent : undefined,
        target: disabled || !href ? undefined : target
      };

      if (renderLink) {
        return renderLink(props);
      }

      return _react["default"].createElement("a", props, (0, _icon.cloneIcon)(icon, {
        className: 'spectrum-SideNav-itemIcon',
        size: 'S'
      }), label);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          header = _this$props3.header,
          className = _this$props3.className,
          children = _this$props3.children,
          disabled = _this$props3.disabled,
          isMultiLevel = _this$props3.isMultiLevel,
          renderLink = _this$props3.renderLink,
          _this$props3$id = _this$props3.id,
          id = _this$props3$id === void 0 ? this.id : _this$props3$id,
          value = _this$props3.value,
          _isSelected = _this$props3._isSelected,
          _nestedNavValue = _this$props3._nestedNavValue,
          manageTabIndex = _this$props3.manageTabIndex,
          onSelect = _this$props3.onSelect,
          ariaLevel = _this$props3.ariaLevel,
          hidden = _this$props3.hidden,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props3, ["header", "className", "children", "disabled", "isMultiLevel", "renderLink", "id", "value", "_isSelected", "_nestedNavValue", "manageTabIndex", "onSelect", "ariaLevel", "hidden"]);
      var _this$state2 = this.state,
          expanded = _this$state2.expanded,
          focused = _this$state2.focused;
      var _this$props4 = this.props,
          label = _this$props4.label,
          _this$props4$tabIndex = _this$props4.tabIndex,
          tabIndex = _this$props4$tabIndex === void 0 ? 0 : _this$props4$tabIndex;

      if (!label && !header) {
        label = children;
      }

      var isCurrent = !!_nestedNavValue && value === _nestedNavValue;

      if (isMultiLevel || manageTabIndex) {
        tabIndex = isCurrent ? tabIndex : -1;
      }

      delete otherProps.label;
      delete otherProps.target;
      delete otherProps['aria-current'];
      return _react["default"].createElement("li", (0, _extends2["default"])({
        className: (0, _classnames["default"])('spectrum-SideNav-item', {
          'is-selected': _isSelected,
          'is-disabled': disabled,
          'is-focused': focused
        }, className),
        onKeyDown: disabled ? undefined : (0, _events.chain)(this.onKeyDown, _events.interpretKeyboardEvent.bind(this)),
        ref: this.setSideNavItemRef
      }, (0, _filterDOMProps["default"])(otherProps)), (label || renderLink) && this.renderLink(label, tabIndex, isMultiLevel), header && _react["default"].createElement("h2", {
        className: "spectrum-SideNav-heading",
        id: this.getDescendantId('header')
      }, header), this.hasNestedNav && _react["default"].createElement(_SideNav["default"], {
        isNested: true,
        variant: isMultiLevel ? 'multiLevel' : undefined,
        id: this.getDescendantId('child'),
        "aria-labelledby": header ? this.getDescendantId('header') : id,
        ariaLevel: ariaLevel + 1,
        hidden: hidden || (isMultiLevel ? !expanded : undefined),
        value: _nestedNavValue,
        onSelect: onSelect
      }, children));
    }
  }, {
    key: "hasNestedNav",
    get: function get() {
      var children = this.props.children;
      return children && typeof children !== 'string';
    }
  }]);
  return SideNavItem;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /**
   * Custom className of sidenav to apply
   */
  className: _propTypes["default"].string,

  /**
   * Whether the item is disabled
   */
  disabled: _propTypes["default"].bool,

  /**
   * The label to display in the item
   */
  label: _propTypes["default"].string,

  /**
   * The value of item
   */
  value: _propTypes["default"].string,

  /**
   * The href of item
   */
  href: _propTypes["default"].string,

  /**
   * The target type for item link
   */
  target: _propTypes["default"].string,

  /**
   * Icon for item
   */
  icon: _propTypes["default"].node,

  /**
   * Whether item should represent the current page within a set of pages or current location within an environment or context when selected.
   * See <a href="https://www.w3.org/TR/wai-aria-1.1/#aria-current" class="spectrum-Link">WAI-ARIA 1.1 definition of `aria-current (state)`</a>
   * attribute.
   */
  'aria-current': _propTypes["default"].oneOf(['page', 'location']),

  /**
   * Whether the item is expanded in case of multi-level sidenav item
   */
  expanded: _propTypes["default"].bool,

  /**
   * Whether the item is expanded at initialization in case of multi-level sidenav item
   */
  defaultExpanded: _propTypes["default"].bool,

  /**
   * A function that returns a href wrapper component.
   * Useful in providing custom href component(eg. Link from react-router-dom).
   *
   * ```js
   *  <SideNavItem renderLink={(props) => <Link {...props} to="/">Foo</Link>}>
   *  </SideNavItem>
   * ```
   */
  renderLink: _propTypes["default"].func,

  /**
   * A click handler for the item
   */
  onClick: _propTypes["default"].func,

  /**
   * A select handler for the item
   */
  onSelect: _propTypes["default"].func
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  'aria-current': 'page',
  disabled: false,
  target: '_self',
  onSelect: NOOP,
  onClick: NOOP
}), _temp)) || _class) || _class) || _class;

exports["default"] = SideNavItem;