"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Progress;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/barloader/index.css");

  require("../../spectrum-css/barloader/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/barloader/index-lg.css");
} else {
  require("../../spectrum-css/barloader/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/barloader/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/barloader/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/barloader/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/barloader/multiStops/darkest.css");
var SIZES = {
  S: 'small',
  M: 'medium'
};

function Progress(_ref) {
  var _ref$value = _ref.value,
      value = _ref$value === void 0 ? 0 : _ref$value,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'M' : _ref$size,
      _ref$showPercent = _ref.showPercent,
      showPercent = _ref$showPercent === void 0 ? false : _ref$showPercent,
      variant = _ref.variant,
      _ref$labelPosition = _ref.labelPosition,
      labelPosition = _ref$labelPosition === void 0 ? 'left' : _ref$labelPosition,
      _ref$isIndeterminate = _ref.isIndeterminate,
      isIndeterminate = _ref$isIndeterminate === void 0 ? false : _ref$isIndeterminate,
      label = _ref.label,
      className = _ref.className,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? (0, _createId["default"])() : _ref$id,
      _ref$min = _ref.min,
      min = _ref$min === void 0 ? 0 : _ref$min,
      _ref$max = _ref.max,
      max = _ref$max === void 0 ? 100 : _ref$max,
      valueLabel = _ref.valueLabel,
      otherProps = (0, _objectWithoutProperties2["default"])(_ref, ["value", "size", "showPercent", "variant", "labelPosition", "isIndeterminate", "label", "className", "id", "min", "max", "valueLabel"]);
  var fillProps = {};
  var ariaValueProps = {};
  var sizeClassPart = SIZES[size];
  value = Math.min(Math.max(+value, min), max);
  var percentage = 100 * value / (max - min);
  var labelId;
  var ariaLabelledby = [];

  if (otherProps['aria-labelledby']) {
    ariaLabelledby.push(otherProps['aria-labelledby']);
    delete otherProps['aria-labelledby'];
  }

  if (label) {
    labelId = (0, _createId["default"])() + '-label';
    ariaLabelledby.push(labelId);
  }

  if (otherProps['aria-label']) {
    ariaLabelledby.length > 0 && ariaLabelledby.push(id);
  }

  ariaLabelledby = ariaLabelledby.length ? ariaLabelledby.join(' ') : null; // only add width to bar fill if determinate

  if (!isIndeterminate) {
    fillProps = {
      style: {
        width: "".concat(percentage, "%")
      }
    };
    ariaValueProps = {
      'aria-valuemin': min,
      'aria-valuemax': max,
      'aria-valuenow': value,
      'aria-valuetext': valueLabel ? valueLabel : "".concat(Math.round(percentage * 10) / 10, "%")
    };
  }

  return _react["default"].createElement("div", (0, _extends2["default"])({
    className: (0, _classnames["default"])('spectrum-BarLoader', "spectrum-BarLoader--".concat(sizeClassPart), {
      'spectrum-BarLoader--indeterminate': isIndeterminate,
      'spectrum-BarLoader--sideLabel': labelPosition === 'left',
      'spectrum-BarLoader--overBackground': variant === 'overBackground',
      'is-positive': variant === 'positive',
      'is-warning': variant === 'warning',
      'is-critical': variant === 'critical'
    }, className),
    role: "progressbar"
  }, ariaValueProps, {
    "aria-labelledby": ariaLabelledby,
    id: id
  }, (0, _filterDOMProps["default"])(otherProps)), label && _react["default"].createElement("div", {
    className: "spectrum-BarLoader-label",
    id: labelId
  }, label), (showPercent || valueLabel) && _react["default"].createElement("div", {
    className: "spectrum-BarLoader-percentage"
  }, valueLabel ? valueLabel : "".concat(Math.round(percentage), "%")), _react["default"].createElement("div", {
    className: "spectrum-BarLoader-track"
  }, _react["default"].createElement("div", (0, _extends2["default"])({
    className: "spectrum-BarLoader-fill"
  }, fillProps))));
}

Progress.propTypes = {
  /**
  * Value between the min and max that specifies the progression of the progress bar.
  * Calculated percentage is automatically clamped to 0-100.
  */
  value: _propTypes["default"].number,

  /**
  * Minimum value for the progress bar. Defaults to 0.
  */
  min: _propTypes["default"].number,

  /**
  * Maximum value for the progress bar. Defaults to 100.
  */
  max: _propTypes["default"].number,

  /**
  * Size of the Progress component. Limited to small (S) or medium (M).
  */
  size: _propTypes["default"].oneOf(['S', 'M']),

  /**
  * Whether to show a percentage for the progress bar's current value
  */
  showPercent: _propTypes["default"].bool,

  /**
   * This is for custom value labels. Useful for more decimal places or currency, etc. It will display in place of the percent from 'showPercent'
   */
  valueLabel: _propTypes["default"].string,

  /**
   * Boolean to determine if the Progress component should endlessly scroll (indeterminate)
   */
  isIndeterminate: _propTypes["default"].bool,

  /**
  * What type of progress bar to show: 'positive' (green), 'warning' (orange), 'critical' (red)
  */
  variant: _propTypes["default"].oneOf(['positive', 'warning', 'critical', 'overBackground']),

  /**
  * Determines the positioning of the provided label.
  * Limited to 'left', 'top', or 'bottom'
  */
  labelPosition: _propTypes["default"].oneOf(['left', 'top', 'bottom']),

  /**
  * Determines the label for the Progress component.
  */
  label: _propTypes["default"].string
};
Progress.displayName = 'Progress';