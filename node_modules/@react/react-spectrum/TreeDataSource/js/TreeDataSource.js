"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _events = require("events");

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/

/**
 * TreeDataSource is a common data source used by views that render heirarchical data,
 * such as [TreeView](/components/TreeView) and [ColumnView](/components/ColumnView). 
 * It supports async loading, drag and drop, and has methods to update data in connected components.
 */
var TreeDataSource =
/*#__PURE__*/
function (_EventEmitter) {
  (0, _inherits2["default"])(TreeDataSource, _EventEmitter);

  function TreeDataSource() {
    (0, _classCallCheck2["default"])(this, TreeDataSource);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TreeDataSource).apply(this, arguments));
  }

  (0, _createClass2["default"])(TreeDataSource, [{
    key: "getChildren",

    /**
     * Loads and returns the child items for the given parent.
     * The parent will be `null` if it is the root.
     * @param {object} item
     * @return {object[]}
     * @abstract
     */
    value: function () {
      var _getChildren = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(item) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                throw new Error('getChildren must be implemented by subclasses');

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function getChildren(_x) {
        return _getChildren.apply(this, arguments);
      }

      return getChildren;
    }()
    /**
     * Returns whether the given parent item has children
     * @param {object} parent
     * @return {boolean}
     * @abstract
     */

  }, {
    key: "hasChildren",
    value: function hasChildren(parent) {
      throw new Error('hasChildren must be implemented by subclasses');
    }
    /**
     * Starts a transaction. All changes until `endTransaction` is called
     * are batched together and applied at once.
     */

  }, {
    key: "startTransaction",
    value: function startTransaction() {
      this.emit('startTransaction');
    }
    /**
     * Ends a transaction. All changes since the last `startTransaction` call
     * are applied together.
     * @param {boolean} [animated=true] whether the changes should be animated
     */

  }, {
    key: "endTransaction",
    value: function endTransaction(animated) {
      this.emit('endTransaction', animated);
    }
    /**
     * Inserts a child into the given parent item.
     * @param {object} parent - The parent object to insert into
     * @param {number} index - The child insertion index
     * @param {object} child - The child to insert
     */

  }, {
    key: "insertChild",
    value: function insertChild(parent, index, child) {
      this.emit('insertChild', parent, index, child);
    }
    /**
     * Removes an item from its parent.
     * @param {object} item - The item to remove
     */

  }, {
    key: "removeItem",
    value: function removeItem(item) {
      this.emit('removeItem', item);
    }
    /**
     * Moves an item to a new parent, or to a new index within the same parent
     * @param {object} fromParent - The item to move
     * @param {object} [toParent] - The parent item to move to. If not provided, the item is moved within the same parent.
     * @param {number} toIndex - The index to move the item to
     */

  }, {
    key: "moveItem",
    value: function moveItem(item, toParent, toIndex) {
      this.emit('moveItem', item, toParent, toIndex);
    }
    /**
     * Reloads the given item
     * @param {object} item
     */

  }, {
    key: "reloadItem",
    value: function reloadItem(item) {
      this.emit('reloadItem', item);
    }
    /**
     * Performs a drop operation on an item in the tree. By default,
     * it inserts all of the items into the target at the start.
     * @param {object} target - the target item of the drop
     * @param {object} index - the index within the target to insert the items at
     * @param {DropOperation} dropOperation - the operation to perform
     * @param {Array} items - the items being dropped
     */

  }, {
    key: "performDrop",
    value: function performDrop(target, index, dropOperation, items) {
      this.startTransaction();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;
          this.insertChild(target, index++, item);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.endTransaction();
    }
    /**
     * Performs a drag and drop move operation. By default,
     * it inserts all of the items into the target at the start.
     * @param {object} target - the target item of the drop
     * @param {object} index - the index within the target to move the items to
     * @param {DropOperation} dropOperation - the operation to perform
     * @param {Array} items - the items being moved
     */

  }, {
    key: "performMove",
    value: function performMove(target, index, dropOperation, items) {
      this.startTransaction();
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = items[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var item = _step2.value;
          this.moveItem(item, target, index++);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.endTransaction();
    }
  }]);
  return TreeDataSource;
}(_events.EventEmitter);

exports["default"] = TreeDataSource;