"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = FieldLabel;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _LabelBase = _interopRequireDefault(require("./LabelBase"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/fieldlabel/index.css");

  require("../../spectrum-css/fieldlabel/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/fieldlabel/index-lg.css");
} else {
  require("../../spectrum-css/fieldlabel/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/fieldlabel/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/fieldlabel/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/fieldlabel/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/fieldlabel/multiStops/darkest.css");

function FieldLabel(_ref) {
  var label = _ref.label,
      position = _ref.position,
      children = _ref.children,
      className = _ref.className,
      labelFor = _ref.labelFor,
      necessity = _ref.necessity,
      necessityIndicator = _ref.necessityIndicator,
      otherProps = (0, _objectWithoutProperties2["default"])(_ref, ["label", "position", "children", "className", "labelFor", "necessity", "necessityIndicator"]);
  return _react["default"].createElement(_LabelBase["default"], (0, _extends2["default"])({
    label: label,
    className: className,
    necessity: necessity,
    necessityIndicator: necessityIndicator,
    componentName: "FieldLabel",
    labelClassName: (0, _classnames["default"])('spectrum-FieldLabel', {
      'spectrum-FieldLabel--left': position === 'left',
      'spectrum-FieldLabel--right': position === 'right'
    }),
    labelFor: labelFor
  }, otherProps), children);
}

FieldLabel.displayName = 'FieldLabel';
FieldLabel.propTypes = {
  /**
   * String to display
   */
  label: _propTypes["default"].string.isRequired,

  /**
   * Justification of the label text within its container. Setting this property
   * will situate the label container to the left of the form field, regardless
   * of the property value.
   */
  position: _propTypes["default"].oneOf(['left', 'right']),

  /**
   * Custom classname to apply to the label
   */
  className: _propTypes["default"].string,

  /**
   * Like in a form, with what input should the label be associated
   */
  labelFor: _propTypes["default"].string,

  /**
   * Style for communicating whether the associated input is required or optional.
   */
  necessity: _propTypes["default"].oneOf(['required', 'optional']),

  /**
   * 'icon' adds an asterix to the field label if necessity is required.
   * 'label' adds a '(required)' or '(optional)' string to the label depending on the necessity.
   */
  necessityIndicator: _propTypes["default"].oneOf(['icon', 'label'])
};
FieldLabel.defaultProps = {
  necessityIndicator: 'icon'
};