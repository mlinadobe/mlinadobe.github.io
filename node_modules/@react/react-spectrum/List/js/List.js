"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _FocusManager = _interopRequireDefault(require("../../utils/FocusManager"));

var _focusRing = _interopRequireDefault(require("../../utils/focusRing"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _class, _class2, _temp;

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css-overrides/menu/index.css");

  require("../../spectrum-css-overrides/menu/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css-overrides/menu/index-lg.css");
} else {
  require("../../spectrum-css-overrides/menu/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css-overrides/menu/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css-overrides/menu/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css-overrides/menu/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css-overrides/menu/multiStops/darkest.css");
var LIST_ITEM_SELECTOR = '.spectrum-Menu-item';
var NOT_DISABLED_SELECTOR = ':not(.is-disabled)';
var SELECTED_LIST_ITEM_SELECTOR = LIST_ITEM_SELECTOR + NOT_DISABLED_SELECTOR + '.is-selected';

var List = (0, _convertUnsafeMethod["default"])(_class = (0, _focusRing["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(List, _Component);

  function List(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, List);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(List).call(this, props));
    _this.listId = (0, _createId["default"])();
    return _this;
  }

  (0, _createClass2["default"])(List, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          children = _this$props.children,
          _this$props$role = _this$props.role,
          role = _this$props$role === void 0 ? 'listbox' : _this$props$role,
          autoFocus = _this$props.autoFocus,
          _this$props$selectabl = _this$props.selectable,
          selectable = _this$props$selectabl === void 0 ? false : _this$props$selectabl,
          _this$props$id = _this$props.id,
          id = _this$props$id === void 0 ? this.listId : _this$props$id,
          _this$props$typeToSel = _this$props.typeToSelect,
          typeToSelect = _this$props$typeToSel === void 0 ? true : _this$props$typeToSel,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["className", "children", "role", "autoFocus", "selectable", "id", "typeToSelect"]);
      return _react["default"].createElement(_FocusManager["default"], {
        itemSelector: LIST_ITEM_SELECTOR + NOT_DISABLED_SELECTOR,
        selectedItemSelector: SELECTED_LIST_ITEM_SELECTOR,
        typeToSelect: typeToSelect,
        autoFocus: autoFocus
      }, _react["default"].createElement("ul", (0, _extends2["default"])({
        id: id,
        className: (0, _classnames["default"])('spectrum-Menu', {
          'is-selectable': selectable
        }, className),
        role: role
      }, (0, _filterDOMProps["default"])(otherProps)), children));
    }
  }]);
  return List;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /**
   * Focus should immediately be given to the list upon render, specifically
   * the currently selected item
   */
  autoFocus: _propTypes["default"].bool,

  /**
   * Class added to this component
   */
  className: _propTypes["default"].string,

  /**
   * The WAI-ARIA role for the list. Defaults to "listbox", but could be "menu" depending on context.
   */
  role: _propTypes["default"].oneOf(['listbox', 'menu']),

  /**
   * Whether or not the list supports selection.
   */
  selectable: _propTypes["default"].bool,

  /**
   * Whether to include alphanumeric typing as a way to move focus to items in a list.
   */
  typeToSelect: _propTypes["default"].bool
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  role: 'listbox'
}), _temp)) || _class) || _class;

exports["default"] = List;