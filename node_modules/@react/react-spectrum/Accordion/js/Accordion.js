"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _FocusManager = _interopRequireDefault(require("../../utils/FocusManager"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _class, _class2, _temp;

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/accordion/index.css");

  require("../../spectrum-css/accordion/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/accordion/index-lg.css");
} else {
  require("../../spectrum-css/accordion/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/accordion/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/accordion/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/accordion/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/accordion/multiStops/darkest.css");
var ACCORDION_ITEM_HEADER_SELECTOR = '.spectrum-Accordion-item:not(.is-disabled) > .spectrum-Accordion-itemHeading > .spectrum-Accordion-itemHeader';
/**
 * An accordion is a list of expandable and collapsible sections.
 */

var Accordion = (0, _convertUnsafeMethod["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Accordion, _Component);

  function Accordion(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Accordion);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Accordion).call(this, props));
    var selectedIndex = props.selectedIndex,
        defaultSelectedIndex = props.defaultSelectedIndex;
    var currentSelectedIndex = selectedIndex !== undefined ? selectedIndex : defaultSelectedIndex;
    _this.state = {
      selectedIndex: _this.normalizeSelectedIndex(currentSelectedIndex)
    };
    return _this;
  }

  (0, _createClass2["default"])(Accordion, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ('selectedIndex' in nextProps) {
        this.setState({
          selectedIndex: this.normalizeSelectedIndex(nextProps.selectedIndex)
        });
      }
    }
  }, {
    key: "onClickItem",
    value: function onClickItem(index) {
      var selectedIndex = this.state.selectedIndex;

      if (this.props.multiselectable) {
        selectedIndex = (0, _toConsumableArray2["default"])(selectedIndex);
        var i = selectedIndex.indexOf(index);
        var selected = i !== -1;

        if (selected) {
          selectedIndex.splice(i, 1);
        } else {
          selectedIndex.push(index);
        }
      } else {
        selectedIndex = selectedIndex[0] === index ? [] : [index];
      }

      this.setSelectedKey(selectedIndex);
    }
  }, {
    key: "setSelectedKey",
    value: function setSelectedKey(selectedIndex) {
      // If selectedIndex is defined on props then this is a controlled component and we shouldn't
      // change our own state.
      if (!('selectedIndex' in this.props)) {
        this.setState({
          selectedIndex: selectedIndex
        });
      }

      var deliverableSelectedIndex = selectedIndex;

      if (!this.props.multiselectable) {
        deliverableSelectedIndex = selectedIndex.length ? selectedIndex[0] : null;
      }

      this.props.onChange(deliverableSelectedIndex);
    }
  }, {
    key: "getItems",
    value: function getItems() {
      var _this2 = this;

      var selectedIndex = this.state.selectedIndex;
      var _this$props = this.props,
          multiselectable = _this$props.multiselectable,
          ariaLevel = _this$props.ariaLevel,
          children = _this$props.children;
      return _react["default"].Children.map(children, function (child, index) {
        if (!_react["default"].isValidElement(child)) {
          return null;
        }

        var selected = multiselectable ? selectedIndex.indexOf(index) !== -1 : selectedIndex[0] === index;
        var props = {
          selected: selected,
          ariaLevel: ariaLevel,
          onItemClick: _this2.onClickItem.bind(_this2, index)
        };
        return _react["default"].cloneElement(child, props);
      });
    }
  }, {
    key: "normalizeSelectedIndex",
    value: function normalizeSelectedIndex(selectedIndex) {
      if (!Array.isArray(selectedIndex)) {
        selectedIndex = selectedIndex !== undefined ? [selectedIndex] : [];
      }

      return selectedIndex.map(function (index) {
        return parseInt(index, 10);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props2, ["className"]); // We don't need/want to add onChange to the div because we call it manually when we hear that
      // an accordion item has been clicked. If we were to add the handler to the div, it would be
      // called every time any input inside the accordion is changed.

      delete otherProps.onChange;
      return _react["default"].createElement(_FocusManager["default"], {
        itemSelector: ACCORDION_ITEM_HEADER_SELECTOR,
        manageTabIndex: false
      }, _react["default"].createElement("div", (0, _extends2["default"])({}, (0, _filterDOMProps["default"])(otherProps), {
        className: (0, _classnames["default"])('spectrum-Accordion', className),
        role: "region"
      }), this.getItems()));
    }
  }]);
  return Accordion;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /**
   * The index of the AccordionItem that should be selected (open). If 'multiselectable'
   * is true, selectedIndex can be an array of indices. When selectedIndex is specified, the component
   * is in a controlled state and an AccordionItem can only be selected by changing the selectedIndex
   * prop value. By default, no AccordionItems will be selected.
   */
  selectedIndex: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number, _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]))]),

  /**
   * The same as selectedIndex except that the component is in an uncontrolled
   * state. AccordionItems can be opened or closed without prop values having changed.
   */
  defaultSelectedIndex: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number, _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]))]),

  /**
   * Whether multiple AccordionItems can be selected (open) at the same time.
   */
  multiselectable: _propTypes["default"].bool,

  /**
   * A function that will be called when an AccordionItem is selected (opened) or
   * deselected (closed). It will be passed the updated selected index.
   */
  onChange: _propTypes["default"].func,

  /**
   * The aria heading level of the accordion items
   */
  ariaLevel: _propTypes["default"].number
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  onChange: function onChange() {},
  multiselectable: false,
  ariaLevel: 3
}), _temp)) || _class;

exports["default"] = Accordion;