"use strict";

var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault3(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault3(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault3(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault3(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault3(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault3(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault3(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault3(require("@babel/runtime/helpers/defineProperty"));

var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));

var _autobindDecorator = _interopRequireDefault3(require("autobind-decorator"));

var _number = require("../../utils/number");

var _classnames = _interopRequireDefault3(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault3(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault3(require("../../utils/createId"));

var _filterDOMProps = _interopRequireDefault3(require("../../utils/filterDOMProps"));

var _moment = require("../../utils/moment");

var _intl = require("../../utils/intl");

var _moment2 = _interopRequireDefault3(require("moment"));

var _propTypes = _interopRequireDefault3(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Select = _interopRequireDefault3(require("../../Select"));

var _Textfield = _interopRequireDefault3(require("../../Textfield"));

require("../style/index.css");

var _VisuallyHidden = _interopRequireDefault3(require("../../VisuallyHidden"));

var _class, _class2, _temp;

var intlMessages = {
  "cs-CZ": (0, _interopRequireDefault2["default"])(require("./../intl/cs-CZ.json"))["default"],
  "da-DK": (0, _interopRequireDefault2["default"])(require("./../intl/da-DK.json"))["default"],
  "de-DE": (0, _interopRequireDefault2["default"])(require("./../intl/de-DE.json"))["default"],
  "en-US": (0, _interopRequireDefault2["default"])(require("./../intl/en-US.json"))["default"],
  "es-ES": (0, _interopRequireDefault2["default"])(require("./../intl/es-ES.json"))["default"],
  "fi-FI": (0, _interopRequireDefault2["default"])(require("./../intl/fi-FI.json"))["default"],
  "fr-FR": (0, _interopRequireDefault2["default"])(require("./../intl/fr-FR.json"))["default"],
  "hu-HU": (0, _interopRequireDefault2["default"])(require("./../intl/hu-HU.json"))["default"],
  "it-IT": (0, _interopRequireDefault2["default"])(require("./../intl/it-IT.json"))["default"],
  "ja-JP": (0, _interopRequireDefault2["default"])(require("./../intl/ja-JP.json"))["default"],
  "ko-KR": (0, _interopRequireDefault2["default"])(require("./../intl/ko-KR.json"))["default"],
  "nb-NO": (0, _interopRequireDefault2["default"])(require("./../intl/nb-NO.json"))["default"],
  "nl-NL": (0, _interopRequireDefault2["default"])(require("./../intl/nl-NL.json"))["default"],
  "pl-PL": (0, _interopRequireDefault2["default"])(require("./../intl/pl-PL.json"))["default"],
  "pt-BR": (0, _interopRequireDefault2["default"])(require("./../intl/pt-BR.json"))["default"],
  "ru-RU": (0, _interopRequireDefault2["default"])(require("./../intl/ru-RU.json"))["default"],
  "sv-SE": (0, _interopRequireDefault2["default"])(require("./../intl/sv-SE.json"))["default"],
  "tr-TR": (0, _interopRequireDefault2["default"])(require("./../intl/tr-TR.json"))["default"],
  "uk-UA": (0, _interopRequireDefault2["default"])(require("./../intl/uk-UA.json"))["default"],
  "zh-CN": (0, _interopRequireDefault2["default"])(require("./../intl/zh-CN.json"))["default"],
  "zh-TW": (0, _interopRequireDefault2["default"])(require("./../intl/zh-TW.json"))["default"]
};
var formatMessage = (0, _intl.messageFormatter)(intlMessages);
/* In Firefox, input[type=number] always strips leading 0. */

var useTextInputType = typeof document !== 'undefined' ? 'MozAppearance' in document.documentElement.style : null;

var Clock = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Clock, _Component);

  function Clock(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Clock);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Clock).call(this, props));
    _this._useTextInputType = useTextInputType;
    _this.clockId = (0, _createId["default"])();
    var _this$props = _this.props,
        value = _this$props.value,
        defaultValue = _this$props.defaultValue,
        displayFormat = _this$props.displayFormat,
        valueFormat = _this$props.valueFormat;

    _moment2["default"].locale((0, _intl.getLocale)());

    var val = (0, _moment.toMoment)(value || defaultValue || '', valueFormat);
    var isValid = val && val.isValid();
    var displayMeridiem = /a/i.test(displayFormat);
    _this.state = {
      value: val,
      hourText: isValid ? _this.getDisplayHour(val.hour(), displayMeridiem) : '',
      minuteText: isValid ? val.format('mm') : '',
      meridiemVal: _this.getMeridiemVal(val),
      displayMeridiem: displayMeridiem
    };
    return _this;
  }

  (0, _createClass2["default"])(Clock, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.autoFocus) {
        this.autoFocusTimeout = requestAnimationFrame(function () {
          return _this2.focus();
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.autoFocusTimeout) {
        cancelAnimationFrame(this.autoFocusTimeout);
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ('value' in nextProps) {
        this.setValue(nextProps.value, nextProps.valueFormat || this.props.valueFormat);
      }
    }
  }, {
    key: "setValue",
    value: function setValue(value, valueFormat) {
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};
      var val = (0, _moment.toMoment)(value, valueFormat || this.props.valueFormat);
      var isValid = val && val.isValid();
      var _this$state = this.state,
          hourText = _this$state.hourText,
          minuteText = _this$state.minuteText,
          displayMeridiem = _this$state.displayMeridiem,
          meridiemVal = _this$state.meridiemVal;
      var newState = {
        value: val
      };

      if (!isValid) {
        newState.hourText = hourText || '';
        newState.minuteText = minuteText || '';
        newState.meridiemVal = meridiemVal || '';
      } else {
        var hourTextVal = this.getDisplayHour(val.hour(), displayMeridiem);
        var newMeridiemVal = this.getMeridiemVal(val);

        if (!hourText || +hourText !== hourTextVal) {
          newState.hourText = hourTextVal.padStart(2, '0');
        }

        if (!minuteText || +minuteText !== val.minute()) {
          newState.minuteText = val.format('mm').padStart(2, '0');
        }

        if (!meridiemVal || meridiemVal !== newMeridiemVal) {
          newState.meridiemVal = newMeridiemVal;
        }
      }

      this.setState(newState, callback);
    }
    /**
     * Handles change event on hour text input
     * @param {Event} e Change event
     * @private
     */

  }, {
    key: "handleHourChange",
    value: function handleHourChange(value, e) {
      var _this$state2 = this.state,
          minuteText = _this$state2.minuteText,
          meridiemVal = _this$state2.meridiemVal;
      e.stopPropagation();
      var newValue = value;

      if (value.replace) {
        newValue = value.replace(/\D/g, '');
      }

      this.changeTime(newValue, minuteText, meridiemVal);
    }
    /**
     * Handles change event on minute text input
     * @param {Event} e Change event
     * @private
     */

  }, {
    key: "handleMinuteChange",
    value: function handleMinuteChange(value, e) {
      var _this$state3 = this.state,
          hourText = _this$state3.hourText,
          meridiemVal = _this$state3.meridiemVal;
      e.stopPropagation();
      var newValue = value;

      if (value.replace) {
        newValue = value.replace(/\D/g, '');
      }

      this.changeTime(hourText, newValue, meridiemVal);
    }
    /**
     * Handles AM/PM Change
     * @param {string} value either 'am' or 'pm'
     * @private
     */

  }, {
    key: "handleMeridiemChange",
    value: function handleMeridiemChange(value) {
      var _this$state4 = this.state,
          hourText = _this$state4.hourText,
          minuteText = _this$state4.minuteText;
      this.changeTime(hourText, minuteText, value);
    }
    /**
     * Handles focus event on text input
     * @param {FocusEvent} e Focus event
     * @private
     */

  }, {
    key: "handleFocus",
    value: function handleFocus(e) {
      this.setState({
        focused: true
      });
    }
    /**
     * Handles blur event on hour text input
     * @param {FocusEvent} e Blur event
     * @private
     */

  }, {
    key: "handleHourBlur",
    value: function handleHourBlur(e) {
      var value = e.target.value;
      this.setState({
        hourText: value.padStart(2, '0'),
        focused: false
      });
    }
    /**
     * Handles blur event on minute text input
     * @param {FocusEvent} e Blur event
     * @private
     */

  }, {
    key: "handleMinuteBlur",
    value: function handleMinuteBlur(e) {
      var value = e.target.value;
      this.setState({
        minuteText: value.padStart(2, '0'),
        focused: false
      });
    }
    /**
     * Handles up or down arrow key event on text input, and depending
     * on value and direction loops time value and adjusts meridiem.
     * @param {Boolean} isHours Whether event target is the hours input
     * @param {KeyboardEvent} e Keyboard event
     * @private
     */

  }, {
    key: "handleTextfieldKeyDown",
    value: function handleTextfieldKeyDown() {
      var isHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var e = arguments.length > 1 ? arguments[1] : undefined;
      var value = this.state.value;
      var newTime = value || (0, _moment.toMoment)('00:00', this.props.valueFormat);
      var _this$props2 = this.props,
          onChange = _this$props2.onChange,
          valueFormat = _this$props2.valueFormat;

      switch (e.key) {
        case 'ArrowUp':
        case 'Up':
          newTime = (0, _moment2["default"])(newTime).add(1, isHours ? 'hour' : 'minute');
          break;

        case 'ArrowDown':
        case 'Down':
          newTime = (0, _moment2["default"])(newTime).add(-1, isHours ? 'hour' : 'minute');
          break;

        default:
          return;
      }

      if (newTime !== value && _moment2["default"].isMoment(newTime)) {
        // don't keep the YYYY-MM-DD the same after adding/subtracting hours or minutes
        if (_moment2["default"].isMoment(value)) {
          newTime = newTime.year(value.year()).month(value.month()).date(value.date());
        }

        e.preventDefault();
        this.setValue(newTime, valueFormat, function () {
          onChange((0, _moment.formatMoment)(newTime, valueFormat), newTime.toDate());
        });
      }
    }
    /**
     * Updates time based on hour and minute text values.
     * @param {String} hourText   Hour text value
     * @param {String} minuteText Minute text value
     * @param {String} meridiemVal    'am' or 'pm'
     * @private
     */

  }, {
    key: "changeTime",
    value: function changeTime(hourText, minuteText, meridiemVal) {
      var _this$props3 = this.props,
          valueFormat = _this$props3.valueFormat,
          onChange = _this$props3.onChange;
      var _this$state5 = this.state,
          value = _this$state5.value,
          displayMeridiem = _this$state5.displayMeridiem; // Set the offset required to convert AM/PM times into 24 hr format

      var meridiemOffset = displayMeridiem && meridiemVal === 'pm' ? 12 : 0;
      var hours = parseInt(hourText, 10);

      if (hours < 12) {
        hours += meridiemOffset;
      } else if (displayMeridiem && meridiemVal === 'am' && hours === 12) {
        hours = 0;
      }

      var minutes = parseInt(minuteText, 10);
      var newTime = _moment2["default"].isMoment(value) && value.clone();

      if (isNaN(hours) || isNaN(minutes)) {
        newTime = '';
      } else {
        if (!_moment2["default"].isMoment(newTime)) {
          newTime = (0, _moment2["default"])();
        }

        newTime.hour((0, _number.clamp)(hours, 0, 23));
        newTime.minute((0, _number.clamp)(minutes, 0, 59));
        newTime.second(0);
        newTime.millisecond(0);
      }

      this.setState({
        hourText: hourText,
        minuteText: minuteText,
        meridiemVal: meridiemVal,
        newTime: newTime
      });

      if (!('value' in this.props)) {
        this.setState({
          value: newTime
        });
      }

      var validMoment = _moment2["default"].isMoment(newTime);

      if (newTime !== value) {
        onChange(validMoment ? (0, _moment.formatMoment)(newTime, valueFormat) : newTime, validMoment && newTime.toDate());
      }
    }
    /**
     * Sets focus to appropriate descendant.
     * @private
     */

  }, {
    key: "focus",
    value: function focus() {
      if (document.activeElement !== this.minuteRef) {
        this.hourRef && this.hourRef.focus();
      }
    }
    /**
     * Returns concatentated string of the ids for elements that label the clock field inputs.
     * @param {String} labelId Field label id
     * @param {String} groupId Fieldset id
     * @return {String}   aria-labelledby string
     * @private
     */

  }, {
    key: "getAriaLabelledbyForTextfield",
    value: function getAriaLabelledbyForTextfield(labelId, groupId) {
      var ariaLabel = this.props['aria-label'];
      var ariaLabelledby = this.props['aria-labelledby'];
      var ariaLabelledbyId = groupId;

      if (ariaLabel) {
        ariaLabelledbyId = groupId;
      }

      if (ariaLabelledby) {
        ariaLabelledbyId = ariaLabelledby;
      }

      return [ariaLabelledbyId, labelId].join(' ');
    }
    /**
     * Returns display hour for a given 24-hour value
     * @param {Number} hour Hour in range 0-23
     * @param {Boolean} displayMeridiem Output should be converted to 12-hour clock
     * @return {String} in range 1-12 (12-hour) or 0-23 (24-hour)
     * @private
     */

  }, {
    key: "getDisplayHour",
    value: function getDisplayHour(hour, displayMeridiem) {
      var newHour = displayMeridiem ? (hour + 11) % 12 + 1 : hour;
      return newHour.toString().padStart(2, '0');
    }
    /**
     * Returns localized label for AM/PM dropdown
     * @param {String} meridiem 'am' or 'pm'
     * @param {String} displayFormat from props
     * @return {String} in range 1-12 (12-hour) or 0-23 (24-hour)
     * @private
     */

  }, {
    key: "getMeridiemLabel",
    value: function getMeridiemLabel(meridiem, displayFormat) {
      var localizedMeridiem = formatMessage(meridiem);
      var upperCase = /A/.test(displayFormat);
      return upperCase ? localizedMeridiem.toUpperCase() : localizedMeridiem;
    }
    /**
     * Returns AM/PM (meridiem) value for a given moment
     * @param {Object} moment
     * @return {String} 'am', 'pm', or '' (for invalid moment values)
     * @private
     */

  }, {
    key: "getMeridiemVal",
    value: function getMeridiemVal(moment) {
      if (!moment || !moment.isValid()) {
        return '';
      } else {
        return moment.hour() >= 12 ? 'pm' : 'am';
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props4 = this.props,
          quiet = _this$props4.quiet,
          disabled = _this$props4.disabled,
          invalid = _this$props4.invalid,
          readOnly = _this$props4.readOnly,
          required = _this$props4.required,
          className = _this$props4.className,
          _this$props4$id = _this$props4.id,
          id = _this$props4$id === void 0 ? this.clockId : _this$props4$id,
          displayFormat = _this$props4.displayFormat,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props4, ["quiet", "disabled", "invalid", "readOnly", "required", "className", "id", "displayFormat"]);
      var _this$state6 = this.state,
          hourText = _this$state6.hourText,
          minuteText = _this$state6.minuteText,
          meridiemVal = _this$state6.meridiemVal,
          newTime = _this$state6.newTime,
          value = _this$state6.value,
          focused = _this$state6.focused,
          displayMeridiem = _this$state6.displayMeridiem;
      var hourMax = displayMeridiem ? 12 : 23;
      var hourMin = displayMeridiem ? 1 : 0;
      var groupId = id + '-group';
      var timeLabelId = id + '-time-label';
      var ariaLabel = otherProps['aria-label'];
      var ariaLabelledby = otherProps['aria-labelledby'];
      var groupAriaLabel = null;
      var groupAriaLabelledby = null;
      var formattedMoment = (0, _moment.formatMoment)(newTime || value, displayFormat);

      if (ariaLabel) {
        groupAriaLabel = ariaLabel;
        groupAriaLabelledby = [groupId, timeLabelId].join(' ');
        delete otherProps['aria-label'];
      } else {
        groupAriaLabelledby = timeLabelId;
      }

      if (ariaLabelledby) {
        groupAriaLabelledby = [ariaLabelledby, timeLabelId].join(' ');
        delete otherProps['aria-labelledby'];
      }

      delete otherProps.autoFocus;
      delete otherProps.valueFormat;
      delete otherProps.value;
      delete otherProps.defaultValue;
      var useTextInputType = this._useTextInputType;
      var inputType = useTextInputType ? 'text' : 'number';
      var inputRole = useTextInputType ? 'spinbutton' : null; // cant use input text with pattern to handle our validation
      // IE 11 requires that no two options in an alternation be able to start with the
      // same character (for the regex in a pattern attribute). If multiple options can
      // start with the same character (or blank), all but the first will be ignored
      // for that case.
      //
      // cant use input number by itself because IE 11 won't prevent other characters

      return _react["default"].createElement("div", (0, _extends2["default"])({
        className: (0, _classnames["default"])('react-spectrum-Clock', className),
        "aria-disabled": disabled,
        "aria-invalid": invalid,
        role: "group",
        id: groupId,
        "aria-label": groupAriaLabel,
        "aria-labelledby": groupAriaLabelledby
      }, (0, _filterDOMProps["default"])(otherProps)), _react["default"].createElement(_VisuallyHidden["default"], {
        element: "time",
        id: timeLabelId,
        "aria-live": focused ? 'polite' : 'off',
        hidden: !focused
      }, formattedMoment), _react["default"].createElement(_Textfield["default"], {
        ref: function ref(el) {
          return _this3.hourRef = el;
        },
        className: "react-spectrum-Clock-hour",
        type: inputType,
        role: inputRole,
        inputMode: "numeric",
        pattern: displayMeridiem ? '1[0-2]|0?[1-9]' : '2[0-3]|[01]?[0-9]',
        value: hourText,
        placeholder: displayMeridiem ? 'hh' : 'HH',
        min: !useTextInputType ? hourMin : null,
        max: !useTextInputType ? hourMax : null,
        "aria-valuemin": hourMin,
        "aria-valuemax": hourMax,
        "aria-valuenow": hourText || null,
        "aria-valuetext": hourText ? hourText.padStart(2, '0') : null,
        invalid: invalid,
        disabled: disabled,
        readOnly: readOnly,
        required: required,
        quiet: quiet,
        id: id,
        "aria-label": formatMessage('Hours'),
        "aria-labelledby": this.getAriaLabelledbyForTextfield(id, groupId),
        onKeyDown: this.handleTextfieldKeyDown.bind(this, true),
        onFocus: this.handleFocus,
        onChange: this.handleHourChange,
        onBlur: this.handleHourBlur
      }), _react["default"].createElement("span", {
        className: "react-spectrum-Clock-divider"
      }, ":"), _react["default"].createElement(_Textfield["default"], {
        ref: function ref(el) {
          return _this3.minuteRef = el;
        },
        className: "react-spectrum-Clock-minute",
        type: inputType,
        role: inputRole,
        inputMode: "numeric",
        pattern: "[0-5]?[0-9]",
        value: minuteText,
        placeholder: "mm",
        min: !useTextInputType ? 0 : null,
        max: !useTextInputType ? 59 : null,
        "aria-valuemin": 0,
        "aria-valuemax": 59,
        "aria-valuenow": minuteText || null,
        "aria-valuetext": minuteText ? minuteText.padStart(2, '0') : null,
        invalid: invalid,
        disabled: disabled,
        readOnly: readOnly,
        required: required,
        quiet: quiet,
        id: id + '-minutes',
        "aria-label": formatMessage('Minutes'),
        "aria-labelledby": this.getAriaLabelledbyForTextfield(id + '-minutes', groupId),
        onKeyDown: this.handleTextfieldKeyDown.bind(this, false),
        onFocus: this.handleFocus,
        onChange: this.handleMinuteChange,
        onBlur: this.handleMinuteBlur
      }), displayMeridiem && _react["default"].createElement(_Select["default"], {
        className: "react-spectrum-Clock-meridiem",
        id: id + '-meridiem',
        placeholder: formatMessage('AM/PM'),
        "aria-label": formatMessage('AM/PM'),
        "aria-labelledby": this.getAriaLabelledbyForTextfield(id + '-meridiem', groupId),
        onChange: this.handleMeridiemChange,
        options: [{
          label: this.getMeridiemLabel('am', displayFormat),
          value: 'am'
        }, {
          label: this.getMeridiemLabel('pm', displayFormat),
          value: 'pm'
        }],
        value: meridiemVal,
        disabled: disabled,
        alignRight: true,
        flexible: true
      }));
    }
  }]);
  return Clock;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "displayName", 'Clock'), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /**
   * Puts component into a controlled state. Clock can accept a number of different value representations
   */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object, _propTypes["default"].number]),

  /**
   * Value component is initally set to. Clock can accept a number of different value representations
   */
  defaultValue: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object, _propTypes["default"].number]),

  /**
   * Moment formats
   */
  valueFormat: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),

  /**
   * Moment formats
   */
  displayFormat: _propTypes["default"].string,

  /**
   * Removes borders around inputs
   */
  quiet: _propTypes["default"].bool,

  /**
   * Greys out the control and makes it so you can't interact with it
   */
  disabled: _propTypes["default"].bool,

  /**
   * Marks the input red as invalid input
   */
  invalid: _propTypes["default"].bool,

  /**
   * Makes it so the value can't be changed by the user
   */
  readOnly: _propTypes["default"].bool,

  /**
   * Mark a form input as required, also necessary for the form to be submitted
   */
  required: _propTypes["default"].bool,

  /**
   * Boolean indicating this component gets focus when mounted to DOM
   */
  autoFocus: _propTypes["default"].bool,

  /**
   * Called when the value changes, returns a Moment object
   */
  onChange: _propTypes["default"].func
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  valueFormat: 'HH:mm',
  displayFormat: 'HH:mm',
  quiet: false,
  disabled: false,
  invalid: false,
  readOnly: false,
  required: false,
  onChange: function onChange() {}
}), _temp)) || _class) || _class;

exports["default"] = Clock;