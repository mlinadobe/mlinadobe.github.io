"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _collectionView = require("@react/collection-view");

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
var TableViewLayout =
/*#__PURE__*/
function (_ListLayout) {
  (0, _inherits2["default"])(TableViewLayout, _ListLayout);

  function TableViewLayout() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2["default"])(this, TableViewLayout);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TableViewLayout).call(this, options));
    _this.insertionIndicator = null;
    return _this;
  }

  (0, _createClass2["default"])(TableViewLayout, [{
    key: "getLayoutInfo",
    value: function getLayoutInfo(type, section, index) {
      if (type === 'insertion-indicator') {
        return this.insertionIndicator;
      }

      return (0, _get2["default"])((0, _getPrototypeOf2["default"])(TableViewLayout.prototype), "getLayoutInfo", this).call(this, type, section, index);
    }
  }, {
    key: "getVisibleLayoutInfos",
    value: function getVisibleLayoutInfos(rect) {
      var layoutInfos = (0, _get2["default"])((0, _getPrototypeOf2["default"])(TableViewLayout.prototype), "getVisibleLayoutInfos", this).call(this, rect);

      if (this.insertionIndicator) {
        layoutInfos.push(this.insertionIndicator);
      }

      return layoutInfos;
    }
  }, {
    key: "validate",
    value: function validate() {
      (0, _get2["default"])((0, _getPrototypeOf2["default"])(TableViewLayout.prototype), "validate", this).call(this);
      var count = this.collectionView.getSectionLength(0);
      this.contentHeight = count * this.rowHeight - 1; // Show the drop insertion indicator if the default drop position of the table view is "between",
      // the target's drop position is also "between", and the table is not empty.

      var dropTarget = this.collectionView._dropTarget;
      var showInsertionIndicator = dropTarget && this.component.props.dropPosition === 'between' && dropTarget.dropPosition === _collectionView.DragTarget.DROP_BETWEEN && count > 0;

      if (showInsertionIndicator) {
        var l = new _collectionView.LayoutInfo('insertion-indicator');
        l.rect = new _collectionView.Rect(0, Math.max(0, Math.min(this.contentHeight - 3, dropTarget.indexPath.index * this.rowHeight - 1)), this.collectionView.size.width, 2);
        l.zIndex = 10;
        this.insertionIndicator = l;
      } else {
        this.insertionIndicator = null;
      }
    }
  }, {
    key: "getDropTarget",
    value: function getDropTarget(point) {
      var dropPosition = this.component.props.dropPosition === 'on' ? _collectionView.DragTarget.DROP_ON : _collectionView.DragTarget.DROP_BETWEEN; // If we are dropping between rows, the target should move to the
      // next item halfway through a row.

      if (dropPosition === _collectionView.DragTarget.DROP_BETWEEN) {
        point = point.copy();
        point.y += this.rowHeight / 2;
      }

      var indexPath = this.collectionView.indexPathAtPoint(point);

      if (indexPath) {
        return new _collectionView.DragTarget('item', indexPath, dropPosition);
      } else {
        var index = dropPosition === _collectionView.DragTarget.DROP_ON ? 0 : this.collectionView.getSectionLength(0);
        return new _collectionView.DragTarget('item', new _collectionView.IndexPath(0, index), _collectionView.DragTarget.DROP_BETWEEN);
      }
    }
  }]);
  return TableViewLayout;
}(_collectionView.ListLayout);

exports["default"] = TableViewLayout;