"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _CollectionView = _interopRequireWildcard(require("../../utils/CollectionView"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _collectionView = require("@react/collection-view");

var _ListDataSource = _interopRequireDefault(require("../../ListDataSource"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _TableCell = _interopRequireDefault(require("./TableCell"));

var _TableRow = _interopRequireDefault(require("./TableRow"));

var _TableViewDataSource = _interopRequireDefault(require("./TableViewDataSource"));

var _TableViewLayout = _interopRequireDefault(require("./TableViewLayout"));

require("../style/index.css");

var _class, _class2, _temp;

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/table/index.css");

  require("../../spectrum-css/table/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/table/index-lg.css");
} else {
  require("../../spectrum-css/table/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/table/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/table/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/table/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/table/multiStops/darkest.css");

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/dropindicator/index.css");

  require("../../spectrum-css/dropindicator/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/dropindicator/index-lg.css");
} else {
  require("../../spectrum-css/dropindicator/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/dropindicator/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/dropindicator/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/dropindicator/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/dropindicator/multiStops/darkest.css");

var columnShape = _propTypes["default"].shape({
  title: _propTypes["default"].string.isRequired,
  sortable: _propTypes["default"].bool,
  width: _propTypes["default"].number,
  minWidth: _propTypes["default"].number,
  maxWidth: _propTypes["default"].number,
  // resizable: PropTypes.bool,
  divider: _propTypes["default"].bool,
  align: _propTypes["default"].oneOf(['left', 'center', 'right'])
});

var sortDescriptorShape = _propTypes["default"].shape({
  column: columnShape.isRequired,
  direction: _propTypes["default"].oneOf([-1, 1]).isRequired
});

var TableView = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(TableView, _Component);

  function TableView(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, TableView);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TableView).call(this, props));
    _this.tableViewId = (0, _createId["default"])();
    var rowHeight = Math.max(48, Math.min(72, props.rowHeight));
    _this.layout = new _TableViewLayout["default"]({
      rowHeight: rowHeight
    });
    _this.state = {
      columns: _this.props.columns || _this.props.defaultColumns || _this.props.dataSource.getColumns(),
      sortDescriptor: _this.props.sortDescriptor || _this.props.defaultSortDescriptor || _this.props.dataSource.sortColumn && {
        // backward compatibility
        column: _this.props.dataSource.sortColumn,
        direction: _this.props.dataSource.sortDirection
      }
    };
    _this.focusedColumnIndex = null;
    return _this;
  }

  (0, _createClass2["default"])(TableView, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      if (props.columns && props.columns !== this.props.columns) {
        this.setState({
          columns: props.columns
        });
      }

      if (props.sortDescriptor && props.sortDescriptor !== this.props.sortDescriptor) {
        this.setState({
          sortDescriptor: props.sortDescriptor
        });
      }
    }
  }, {
    key: "setSelectAll",
    value: function setSelectAll(select) {
      if (select) {
        this.collection.selectAll();
      } else {
        this.collection.clearSelection();
      }
    }
  }, {
    key: "renderHeader",
    value: function renderHeader() {
      var _this2 = this;

      var _this$props = this.props,
          _this$props$id = _this$props.id,
          id = _this$props$id === void 0 ? this.tableViewId : _this$props$id,
          allowsMultipleSelection = _this$props.allowsMultipleSelection,
          allowsSelection = _this$props.allowsSelection;
      var numRows = this.getRowCount();
      var allItemsSelected = this.collection && this.collection.selectedIndexPaths.length === numRows && numRows > 0;
      return _react["default"].createElement("div", {
        role: "rowgroup"
      }, _react["default"].createElement(_TableRow["default"], {
        tableId: id,
        isHeaderRow: true,
        columns: this.state.columns,
        renderCell: this.renderColumnHeader,
        allowsMultipleSelection: allowsSelection && allowsMultipleSelection,
        allowsSelection: allowsSelection,
        selected: allItemsSelected,
        onSelectChange: this.setSelectAll,
        onCellClick: this.sortByColumn,
        onCellFocus: this.onCellFocus,
        collectionView: this.collection,
        tableView: this,
        ref: function ref(row) {
          return _this2.headerRowRef = row;
        }
      }));
    }
  }, {
    key: "renderItemView",
    value: function renderItemView(type, data) {
      var _this$props2 = this.props,
          _this$props2$id = _this$props2.id,
          id = _this$props2$id === void 0 ? this.tableViewId : _this$props2$id,
          allowsMultipleSelection = _this$props2.allowsMultipleSelection,
          allowsSelection = _this$props2.allowsSelection,
          onCellClick = _this$props2.onCellClick,
          onCellDoubleClick = _this$props2.onCellDoubleClick;
      return _react["default"].createElement(_TableRow["default"], {
        tableId: id,
        columns: this.state.columns,
        renderCell: this.renderCell.bind(this, data),
        allowsMultipleSelection: allowsSelection && allowsMultipleSelection,
        allowsSelection: allowsSelection,
        onCellClick: onCellClick,
        onCellDoubleClick: onCellDoubleClick,
        onCellFocus: this.onCellFocus,
        collectionView: this.collection,
        tableView: this
      });
    }
  }, {
    key: "renderColumnHeader",
    value: function renderColumnHeader(column, columnIndex, rowFocused) {
      var _this$props3 = this.props,
          allowsSelection = _this$props3.allowsSelection,
          allowsMultipleSelection = _this$props3.allowsMultipleSelection,
          renderColumnHeader = _this$props3.renderColumnHeader;
      return _react["default"].createElement(_TableCell["default"], {
        isHeaderRow: true,
        column: column,
        sortDir: this.state.sortDescriptor && this.state.sortDescriptor.column === column ? this.state.sortDescriptor.direction : null,
        allowsMultipleSelection: allowsSelection && allowsMultipleSelection,
        rowFocused: rowFocused
      }, renderColumnHeader ? renderColumnHeader(column) : column.title);
    }
  }, {
    key: "renderCell",
    value: function renderCell(data, column, columnIndex, rowFocused) {
      // For backwards compatibility with TableViewDataSource, support
      // getting per-cell data instead of per-row data.
      if (this.props.dataSource instanceof _TableViewDataSource["default"]) {
        data = data[columnIndex];
      }

      return _react["default"].createElement(_TableCell["default"], {
        column: column,
        rowFocused: rowFocused
      }, this.props.renderCell(column, data, rowFocused));
    }
  }, {
    key: "renderSupplementaryView",
    value: function renderSupplementaryView(type) {
      var allowsSelection = this.props.allowsSelection;
      var colCount = this.state.columns.length;

      if (allowsSelection) {
        colCount += 1;
      }

      if (type === 'insertion-indicator') {
        return _react["default"].createElement(_CollectionView.RowWrapper, {
          className: "spectrum-DropIndicator spectrum-DropIndicator--horizontal",
          colCount: colCount
        });
      }

      return null;
    }
  }, {
    key: "sortByColumn",
    value: function () {
      var _sortByColumn = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(column) {
        var dir, sortDescriptor;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (column.sortable) {
                  dir = TableView.SORT_ASCENDING;

                  if (this.state.sortDescriptor && this.state.sortDescriptor.column === column) {
                    dir = -this.state.sortDescriptor.direction;
                  }

                  sortDescriptor = {
                    column: column,
                    direction: dir
                  };

                  if (this.props.onSortChange) {
                    this.props.onSortChange(sortDescriptor);
                  }

                  if (!('sortDescriptor' in this.props)) {
                    this.setState({
                      sortDescriptor: sortDescriptor
                    });
                  }
                }

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function sortByColumn(_x) {
        return _sortByColumn.apply(this, arguments);
      }

      return sortByColumn;
    }()
  }, {
    key: "onSelectionChange",
    value: function onSelectionChange(selectedIndexPaths) {
      // Force update to properly set the state of the Select All checkbox
      this.forceUpdate();

      if (this.props.onSelectionChange) {
        this.props.onSelectionChange(selectedIndexPaths);
      }
    }
  }, {
    key: "getRowCount",
    value: function getRowCount() {
      var dataSource = this.props.dataSource;
      var count = 0;
      var numSections = dataSource.getNumberOfSections();

      for (var section = 0; section < numSections; section++) {
        count += dataSource.getSectionLength(section);
      }

      return count;
    }
  }, {
    key: "onCellFocus",
    value: function onCellFocus(columnIndex, e) {
      this.focusedColumnIndex = columnIndex;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props4 = this.props,
          allowsMultipleSelection = _this$props4.allowsMultipleSelection,
          allowsSelection = _this$props4.allowsSelection,
          className = _this$props4.className,
          dataSource = _this$props4.dataSource,
          _this$props4$id = _this$props4.id,
          id = _this$props4$id === void 0 ? this.tableViewId : _this$props4$id,
          quiet = _this$props4.quiet,
          ariaLabel = _this$props4['aria-label'],
          ariaLabelledby = _this$props4['aria-labelledby'],
          ariaDescribedby = _this$props4['aria-describedby'];
      var tableClasses = (0, _classnames["default"])(className, 'react-spectrum-TableView', 'spectrum-Table', {
        'spectrum-Table--quiet': quiet
      });
      var rowCount = this.getRowCount(0) + 1;
      var colCount = this.state.columns.length;

      if (allowsSelection) {
        colCount += 1;
      }

      return _react["default"].createElement("div", {
        id: id,
        className: tableClasses,
        role: "grid",
        "aria-rowcount": rowCount,
        "aria-colcount": colCount,
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledby,
        "aria-describedby": ariaDescribedby,
        "aria-multiselectable": allowsSelection && allowsMultipleSelection || null
      }, this.renderHeader(), _react["default"].createElement(_CollectionView["default"], (0, _extends2["default"])({}, this.props, {
        ref: function ref(c) {
          return _this3.collection = c ? c.collection : null;
        },
        role: "rowgroup",
        className: "spectrum-Table-body react-spectrum-TableView-body",
        layout: this.layout,
        dataSource: dataSource,
        renderItemView: this.renderItemView,
        renderSupplementaryView: this.renderSupplementaryView,
        canSelectItems: allowsSelection,
        allowsMultipleSelection: allowsMultipleSelection,
        sortDescriptor: this.state.sortDescriptor,
        selectionMode: "toggle",
        keyboardMode: "focus",
        onSelectionChanged: this.onSelectionChange,
        onRowCountChanged: this.onRowCountChanged,
        colCount: colCount
      })));
    }
  }]);
  return TableView;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /** The columns to display in the table view (controlled). */
  columns: _propTypes["default"].arrayOf(columnShape),

  /** The initial columns to display in the table view (uncontrolled). */
  defaultColumns: _propTypes["default"].arrayOf(columnShape),

  /** The datasource for the table view. Should be a subclass of `ListDataSource`. */
  dataSource: _propTypes["default"].instanceOf(_ListDataSource["default"]).isRequired,

  /** A function which renders a cell. Passed a column object and cell data. */
  renderCell: _propTypes["default"].func.isRequired,

  /** An optional function which overrides the rendering for a column header. Passed the column object. */
  renderColumnHeader: _propTypes["default"].func,

  /** An optional function which is called to render the contents of the table body when there are no rows. */
  renderEmptyView: _propTypes["default"].func,

  /** Whether to allow the user to select items */
  allowsSelection: _propTypes["default"].bool,

  /** Whether to allow multiple selection of items */
  allowsMultipleSelection: _propTypes["default"].bool,

  /** A function that is called when the selection changes. Passed an IndexPathSet object. */
  onSelectionChange: _propTypes["default"].func,

  /** Sets the selected rows. Should be an IndexPathSet object or an array of IndexPaths. */
  selectedIndexPaths: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].instanceOf(_collectionView.IndexPath)), _propTypes["default"].instanceOf(_collectionView.IndexPathSet)]),

  /** The sort column and direction (controlled). */
  sortDescriptor: sortDescriptorShape,

  /** The initial sort column and direction (uncontrolled). */
  defaultSortDescriptor: sortDescriptorShape,

  /** A function that is called when the sort descriptor changes. */
  onSortChange: _propTypes["default"].func,

  /** A function that is called when a cell is clicked. Passed a column object and row index. */
  onCellClick: _propTypes["default"].func,

  /* A function that is called when a cell is double clicked. Passed a column object and row index. */
  onCellDoubleClick: _propTypes["default"].func,

  /** Whether to use the spectrum quiet variant. */
  quiet: _propTypes["default"].bool,

  /** The height each row should be in the table. It has a maximum of 72 */
  rowHeight: _propTypes["default"].number,

  /** Whether the user can drag rows from the table. */
  canDragItems: _propTypes["default"].bool,

  /** A function which renders the view to display under the cursor during drag and drop. */
  renderDragView: _propTypes["default"].func,

  /**
   * Whether the TableView accepts drops.
   * If `true`, the table accepts all types of drops. Alternatively,
   * it can be set to an array of accepted drop types.
   */
  acceptsDrops: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].arrayOf(_propTypes["default"].string)]),

  /**
   * Whether drops should appear on top of rows, or between them. If you want to customize this
   * or mix the modes, you can override `getDropTarget` on the data source.
   */
  dropPosition: _propTypes["default"].oneOf(['on', 'between'])
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  allowsSelection: true,
  allowsMultipleSelection: true,
  canDragItems: false,
  acceptsDrops: false,
  dropPosition: 'between'
}), (0, _defineProperty2["default"])(_class2, "SORT_ASCENDING", 1), (0, _defineProperty2["default"])(_class2, "SORT_DESCENDING", -1), _temp)) || _class) || _class;

exports["default"] = TableView;