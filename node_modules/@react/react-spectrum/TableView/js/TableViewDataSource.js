"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _collectionView = require("@react/collection-view");

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/

/*
 * TableViewDataSource is the super class for all data sources used by TableView.
 * @deprecated
 */
var TableViewDataSource =
/*#__PURE__*/
function (_DataSource) {
  (0, _inherits2["default"])(TableViewDataSource, _DataSource);

  function TableViewDataSource() {
    var _this;

    (0, _classCallCheck2["default"])(this, TableViewDataSource);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TableViewDataSource).call(this));
    console.warn('TableViewDataSource is deprecated and will be removed in the next major version of react-spectrum. Please switch to the new TableView API using ListDataSource. See http://react-spectrum.corp.adobe.com/components/TableView for details.');
    _this.columns = _this.getColumns();
    _this.sortColumn = null;
    _this.sortDir = -1;
    return _this;
  }

  (0, _createClass2["default"])(TableViewDataSource, [{
    key: "getNumberOfSections",
    value: function getNumberOfSections() {
      return 1;
    }
  }, {
    key: "getSectionLength",
    value: function getSectionLength(section) {
      return this.getNumberOfRows(section);
    }
  }, {
    key: "getItem",
    value: function getItem(section, index) {
      var _this2 = this;

      return this.columns.map(function (column) {
        return _this2.getCell(column, index, section);
      });
    }
    /**
     * Returns a list of columns in the TableView
     * @return {object[]}
     * @abstract
     */

  }, {
    key: "getColumns",
    value: function getColumns() {
      throw new Error('getColumns must be implemented by subclasses');
    }
    /**
     * Returns the number of rows in the TableView
     * @return {number}
     * @abstract
     */

  }, {
    key: "getNumberOfRows",
    value: function getNumberOfRows(section) {
      throw new Error('getNumberOfRows must be implemented by subclasses');
    }
    /**
     * Returns the data for a cell in the TableView
     * @return {any}
     * @abstract
     */

  }, {
    key: "getCell",
    value: function getCell(column, row, section) {
      throw new Error('getCell must be implemented by subclasses');
    }
  }, {
    key: "getSectionHeader",
    value: function getSectionHeader(section) {
      return null;
    }
  }, {
    key: "performSort",
    value: function () {
      var _performSort = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(sortDescriptor) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.sortColumn = sortDescriptor.column;
                this.sortDir = sortDescriptor.direction;
                this.sort(this.sortColumn, this.sortDir);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function performSort(_x) {
        return _performSort.apply(this, arguments);
      }

      return performSort;
    }()
  }, {
    key: "performLoad",
    value: function () {
      var _performLoad = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function performLoad() {
        return _performLoad.apply(this, arguments);
      }

      return performLoad;
    }()
  }, {
    key: "performLoadMore",
    value: function () {
      var _performLoadMore = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3() {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.loadMore();

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function performLoadMore() {
        return _performLoadMore.apply(this, arguments);
      }

      return performLoadMore;
    }()
    /**
     * Called by the TableView when scrolling near the bottom. You can use this
     * opportunity to load more data, e.g. for infinite scrolling.
     * @abstract
     */

  }, {
    key: "loadMore",
    value: function () {
      var _loadMore = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4() {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function loadMore() {
        return _loadMore.apply(this, arguments);
      }

      return loadMore;
    }()
  }, {
    key: "sort",

    /**
     * Called by the TableView when a column header is clicked. You should sort your data
     * accordingly and call `reloadData`.
     * @param {object} column
     * @param {number} dir
     * @abstract
     */
    value: function sort(column, dir) {
      throw new Error('sort must be implemented by subclasses');
    }
    /**
     * Reloads the data in the TableView
     */

  }, {
    key: "reloadData",
    value: function reloadData() {
      this.emit('reloadSection', 0, false);
    }
  }]);
  return TableViewDataSource;
}(_collectionView.DataSource);

exports["default"] = TableViewDataSource;