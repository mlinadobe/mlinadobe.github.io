"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _CheckmarkSmall = _interopRequireDefault(require("../../Icon/core/CheckmarkSmall"));

var _classnames = _interopRequireDefault(require("classnames"));

var _DashSmall = _interopRequireDefault(require("../../Icon/core/DashSmall"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _SwitchBase = _interopRequireDefault(require("../../Switch/js/SwitchBase"));

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/checkbox/index.css");

  require("../../spectrum-css/checkbox/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/checkbox/index-lg.css");
} else {
  require("../../spectrum-css/checkbox/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/checkbox/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/checkbox/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/checkbox/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/checkbox/multiStops/darkest.css");

var Checkbox =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Checkbox, _Component);

  function Checkbox() {
    (0, _classCallCheck2["default"])(this, Checkbox);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Checkbox).apply(this, arguments));
  }

  (0, _createClass2["default"])(Checkbox, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setIndeterminate();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.setIndeterminate();
    } // There is no way to set indeterminate through markup such that it will be picked up by a CSS
    // indeterminate pseudo-selector. It can only be done via javascript.

  }, {
    key: "setIndeterminate",
    value: function setIndeterminate() {
      var indeterminate = this.props.indeterminate;
      var input = this.inputRef && this.inputRef.getInput();

      if (indeterminate != null && input) {
        input.indeterminate = indeterminate;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          indeterminate = _this$props.indeterminate,
          quiet = _this$props.quiet,
          className = _this$props.className,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["indeterminate", "quiet", "className"]); // override the aria-checked prop of SwitchBase only if it is indeterminate.

      if (indeterminate) {
        otherProps['aria-checked'] = 'mixed';
      }

      var markIcon = indeterminate ? _react["default"].createElement(_DashSmall["default"], {
        size: null,
        className: "spectrum-Checkbox-partialCheckmark"
      }) : _react["default"].createElement(_CheckmarkSmall["default"], {
        size: null,
        className: "spectrum-Checkbox-checkmark"
      });
      return _react["default"].createElement(_SwitchBase["default"], (0, _extends2["default"])({
        ref: function ref(el) {
          return _this.inputRef = el;
        },
        inputType: "checkbox",
        className: (0, _classnames["default"])('spectrum-Checkbox', {
          'is-indeterminate': indeterminate,
          'spectrum-Checkbox--quiet': quiet
        }, className),
        inputClassName: "spectrum-Checkbox-input",
        markClassName: "spectrum-Checkbox-box",
        markIcon: markIcon,
        labelClassName: "spectrum-Checkbox-label"
      }, otherProps));
    }
  }]);
  return Checkbox;
}(_react.Component);

exports["default"] = Checkbox;
(0, _defineProperty2["default"])(Checkbox, "propTypes", {
  /**
   * Label for the checkbox
   */
  label: _propTypes["default"].string,

  /**
   * Whether to render the label for the checkbox
   */
  renderLabel: _propTypes["default"].bool,

  /**
   * defaultChecked is undefined by default so we can respect
   * the value that is passed in without erroneously putting
   * both checked and defaultChecked on the input
   */
  defaultChecked: _propTypes["default"].bool,

  /**
   * if the checkbox can't be interacted with, and also greys it out
   */
  disabled: _propTypes["default"].bool,

  /**
   * Uses standard HTML required to make a form invalid, also get a highlight if not filled in
   */
  required: _propTypes["default"].bool,

  /**
   * If the value is invalid
   */
  invalid: _propTypes["default"].bool,

  /**
   * Makes it so the checkbox can't be interacted with
   */
  readOnly: _propTypes["default"].bool,

  /**
   * Callback for when the checkbox value changes
   */
  onChange: _propTypes["default"].func,

  /**
   * Uses a dash instead of a check to indicate an in between or "unknown" state
   */
  indeterminate: _propTypes["default"].bool,

  /**
  * Whether the checkbox is a quiet variation
  */
  quiet: _propTypes["default"].bool
});
(0, _defineProperty2["default"])(Checkbox, "defaultProps", {
  renderLabel: true,
  defaultChecked: undefined,
  disabled: false,
  required: false,
  invalid: false,
  readOnly: false,
  onChange: function onChange() {},
  indeterminate: false,
  quiet: false
});
Checkbox.displayName = 'Checkbox';