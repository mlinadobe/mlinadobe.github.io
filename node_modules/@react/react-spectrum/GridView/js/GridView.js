"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _CollectionView = _interopRequireDefault(require("../../utils/CollectionView"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _GridItem = _interopRequireDefault(require("./GridItem"));

var _collectionView = require("@react/collection-view");

var _ListDataSource = _interopRequireDefault(require("../../ListDataSource"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

require("../style/index.css");

var _class, _class2, _temp;

var GridView = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(GridView, _React$Component);

  function GridView(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, GridView);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(GridView).call(this, props));
    _this.state = {
      layout: _this.getLayout(props.layout, props.cardSize)
    };
    return _this;
  }

  (0, _createClass2["default"])(GridView, [{
    key: "getLayout",
    value: function getLayout(layout, cardSize) {
      if (typeof layout === 'function') {
        layout = new layout({
          cardSize: cardSize
        });
      }

      if (layout instanceof _collectionView.Layout) {
        return layout;
      }

      throw new Error('Invalid layout prop passed to GridView. Must be a Layout constructor or an instanceof the Layout class.');
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      if (props.layout !== this.props.layout || props.cardSize !== this.props.cardSize) {
        this.setState({
          layout: this.getLayout(props.layout, props.cardSize)
        });
      }
    }
  }, {
    key: "renderItemView",
    value: function renderItemView(type, data) {
      return _react["default"].createElement(_GridItem["default"], {
        size: this.props.cardSize,
        allowsSelection: this.props.allowsSelection
      }, this.props.renderItem(data));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          allowsSelection = _this$props.allowsSelection,
          allowsMultipleSelection = _this$props.allowsMultipleSelection,
          className = _this$props.className,
          dataSource = _this$props.dataSource,
          onSelectionChange = _this$props.onSelectionChange,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["allowsSelection", "allowsMultipleSelection", "className", "dataSource", "onSelectionChange"]);
      var rowCount = dataSource && dataSource.getNumberOfSections() > 0 ? dataSource.getSectionLength(0) : 0;
      return _react["default"].createElement(_CollectionView["default"], (0, _extends2["default"])({}, otherProps, {
        role: "grid",
        "aria-rowcount": rowCount,
        "aria-multiselectable": allowsSelection && allowsMultipleSelection || null,
        className: (0, _classnames["default"])('react-spectrum-GridView', className),
        renderItemView: this.renderItemView,
        layout: this.state.layout,
        dataSource: dataSource,
        canSelectItems: allowsSelection,
        onSelectionChanged: onSelectionChange,
        allowsMultipleSelection: allowsMultipleSelection,
        selectionMode: "toggle",
        keyboardMode: "focus"
      }));
    }
  }]);
  return GridView;
}(_react["default"].Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /** The layout to arrange the items in. */
  layout: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].instanceOf(_collectionView.Layout)]).isRequired,

  /** Whether changes to the `layout` prop should be animated. */
  animateLayoutChanges: _propTypes["default"].bool,

  /** Whether to display large or small size cards */
  cardSize: _propTypes["default"].oneOf(['S', 'L']),

  /** The datasource for the grid view. Should be a subclass of `ListDataSource`. */
  dataSource: _propTypes["default"].instanceOf(_ListDataSource["default"]).isRequired,

  /** A function which renders a cell. Passed a column object and cell data. */
  renderItem: _propTypes["default"].func.isRequired,

  /** An optional function which is called to render the contents of the grid view when there are no items. */
  renderEmptyView: _propTypes["default"].func,

  /** Whether to allow the user to select items */
  allowsSelection: _propTypes["default"].bool,

  /** Whether to allow multiple selection of items */
  allowsMultipleSelection: _propTypes["default"].bool,

  /** A function that is called when the selection changes. Passed an IndexPathSet object. */
  onSelectionChange: _propTypes["default"].func,

  /** Sets the selected items. Should be an IndexPathSet object or an array of IndexPaths. */
  selectedIndexPaths: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].instanceOf(_collectionView.IndexPath)), _propTypes["default"].instanceOf(_collectionView.IndexPathSet)]),

  /** Whether the user can drag items from the grid view. */
  canDragItems: _propTypes["default"].bool,

  /** A function which renders the view to display under the cursor during drag and drop. */
  renderDragView: _propTypes["default"].func,

  /**
   * Whether the GridView accepts drops.
   * If `true`, the grid view accepts all types of drops. Alternatively,
   * it can be set to an array of accepted drop types.
   */
  acceptsDrops: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].arrayOf(_propTypes["default"].string)]),

  /**
   * Whether drops should appear on top of items, or between them. If you want to customize this
   * or mix the modes, you can override `getDropTarget` on the data source.
   */
  dropPosition: _propTypes["default"].oneOf(['on', 'between'])
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  cardSize: 'L',
  animateLayoutChanges: true,
  allowsSelection: true,
  allowsMultipleSelection: true,
  canDragItems: false,
  acceptsDrops: false,
  dropPosition: 'between'
}), _temp)) || _class) || _class;

exports["default"] = GridView;