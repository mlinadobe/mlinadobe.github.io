"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
var GridItem =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(GridItem, _React$Component);

  function GridItem() {
    (0, _classCallCheck2["default"])(this, GridItem);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(GridItem).apply(this, arguments));
  }

  (0, _createClass2["default"])(GridItem, [{
    key: "focus",
    value: function focus() {
      if (!this.cell) {
        return;
      } // If the cell provides a `focus` method, call it, otherwise find a DOM node to focus.


      if (typeof this.cell.focus === 'function') {
        this.cell.focus();
      } else {
        _reactDom["default"].findDOMNode(this.cell).focus();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          selected = _this$props.selected,
          focused = _this$props.focused,
          layoutInfo = _this$props.layoutInfo,
          collectionView = _this$props.collectionView,
          size = _this$props.size,
          allowsSelection = _this$props.allowsSelection;
      var tabIndex = focused || !collectionView.focusedIndexPath ? 0 : -1;
      return _react["default"].createElement("div", {
        role: "row",
        className: "react-spectrum-GridView-item",
        "aria-rowindex": layoutInfo.index + 1
      }, _react["default"].cloneElement(this.props.children, {
        ref: function ref(cell) {
          return _this.cell = cell;
        },
        role: 'gridcell',
        tabIndex: tabIndex,
        'aria-selected': selected,
        allowsSelection: allowsSelection,
        selected: selected,
        focused: focused,
        isDropTarget: this.props['drop-target'],
        onLoad: this.props.onLoad,
        variant: collectionView.layout.cardType,
        size: size
      }));
    }
  }]);
  return GridItem;
}(_react["default"].Component);

exports["default"] = GridItem;