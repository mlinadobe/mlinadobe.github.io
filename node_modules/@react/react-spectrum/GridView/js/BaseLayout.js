"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _collectionView = require("@react/collection-view");

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
var BaseLayout =
/*#__PURE__*/
function (_Layout) {
  (0, _inherits2["default"])(BaseLayout, _Layout);

  function BaseLayout() {
    (0, _classCallCheck2["default"])(this, BaseLayout);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(BaseLayout).apply(this, arguments));
  }

  (0, _createClass2["default"])(BaseLayout, [{
    key: "shouldShowDropSpacing",
    value: function shouldShowDropSpacing() {
      var dropTarget = this.collectionView._dropTarget;
      var dragTarget = this.collectionView._dragTarget; // If items are being reordered, don't show the drop spacing if the drop target is right next to the drag target.
      // When dropped, the item will not move since the target is the same as the source.

      if (dropTarget && dragTarget && dragTarget.indexPath.section === dropTarget.indexPath.section && (dragTarget.indexPath.index === dropTarget.indexPath.index || dragTarget.indexPath.index + 1 === dropTarget.indexPath.index)) {
        return false;
      } // Only show the drop spacing if dropping between two items.
      // If the default drop position is not "between", then we could be dropping on the entire grid instead of an item.


      return dropTarget && dropTarget.dropPosition === _collectionView.DragTarget.DROP_BETWEEN && this.component.props.dropPosition === 'between';
    }
  }, {
    key: "getInitialLayoutInfo",
    value: function getInitialLayoutInfo(type, section, index) {
      var initial = (0, _get2["default"])((0, _getPrototypeOf2["default"])(BaseLayout.prototype), "getInitialLayoutInfo", this).call(this, type, section, index);
      initial.opacity = 0;
      initial.transform = 'scale3d(0.8, 0.8, 0.8)';
      return initial;
    }
  }, {
    key: "getFinalLayoutInfo",
    value: function getFinalLayoutInfo(type, section, index) {
      var _final = (0, _get2["default"])((0, _getPrototypeOf2["default"])(BaseLayout.prototype), "getFinalLayoutInfo", this).call(this, type, section, index);

      _final.opacity = 0;
      _final.transform = 'scale3d(0.8, 0.8, 0.8)';
      return _final;
    }
  }, {
    key: "_findClosestLayoutInfo",
    value: function _findClosestLayoutInfo(target, rect) {
      var layoutInfos = this.getVisibleLayoutInfos(rect);
      var best = null;
      var bestDistance = Infinity;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = layoutInfos[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var cur = _step.value;

          if (cur.type === 'item') {
            var dist = Math.pow(target.x - cur.rect.x, 2) + Math.pow(target.y - cur.rect.y, 2);

            if (dist < bestDistance) {
              best = cur;
              bestDistance = dist;
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return best;
    }
  }, {
    key: "_findClosest",
    value: function _findClosest(target, rect) {
      var best = this._findClosestLayoutInfo(target, rect);

      if (best) {
        return new _collectionView.IndexPath(best.section, best.index);
      }

      return null;
    }
  }]);
  return BaseLayout;
}(_collectionView.Layout);

exports["default"] = BaseLayout;