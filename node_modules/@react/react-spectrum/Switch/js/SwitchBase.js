"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _events = require("../../utils/events");

var _focusRing = _interopRequireDefault(require("../../utils/focusRing"));

var _string = require("../../utils/string");

var _react = _interopRequireWildcard(require("react"));

var _class, _class2, _temp;

var SwitchBase = (0, _convertUnsafeMethod["default"])(_class = (0, _focusRing["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(SwitchBase, _Component);

  function SwitchBase(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, SwitchBase);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(SwitchBase).call(this, props));
    var checked = props.checked,
        defaultChecked = props.defaultChecked;
    _this.state = {
      checked: checked !== undefined ? checked : defaultChecked || false
    };
    return _this;
  }

  (0, _createClass2["default"])(SwitchBase, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ('checked' in nextProps) {
        this.setState({
          checked: nextProps.checked
        });
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      if (this.inputRef && !this.disabled) {
        this.inputRef.focus();
      }
    }
  }, {
    key: "setChecked",
    value: function setChecked(checked) {
      if (!('checked' in this.props)) {
        this.setState({
          checked: checked
        });
      }
    }
  }, {
    key: "getInput",
    value: function getInput() {
      return this.inputRef;
    }
  }, {
    key: "handleChange",
    value: function handleChange(e) {
      var onChange = this.props.onChange;
      var checked = e.target.checked;
      this.setChecked(checked);
      onChange(checked, e);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          label = _this$props.label,
          value = _this$props.value,
          name = _this$props.name,
          disabled = _this$props.disabled,
          required = _this$props.required,
          invalid = _this$props.invalid,
          readOnly = _this$props.readOnly,
          className = _this$props.className,
          style = _this$props.style,
          children = _this$props.children,
          inputType = _this$props.inputType,
          renderLabel = _this$props.renderLabel,
          inputClassName = _this$props.inputClassName,
          markClassName = _this$props.markClassName,
          markIcon = _this$props.markIcon,
          labelClassName = _this$props.labelClassName,
          onMouseDown = _this$props.onMouseDown,
          onMouseUp = _this$props.onMouseUp,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["label", "value", "name", "disabled", "required", "invalid", "readOnly", "className", "style", "children", "inputType", "renderLabel", "inputClassName", "markClassName", "markIcon", "labelClassName", "onMouseDown", "onMouseUp"]);
      var checked = this.state.checked;
      var shouldRenderLabel = renderLabel && (label || children);
      var Element = shouldRenderLabel ? 'label' : 'div'; // Don't let native browser change events bubble up to the root div.
      // Otherwise we double dispatch.

      delete otherProps.onChange; // Add aria-label that concatenates label and children
      // when renderLabel is false and no other aria-label is provided.

      var ariaLabel = null;

      if (otherProps['aria-label']) {
        ariaLabel = otherProps['aria-label'];
        delete otherProps['aria-label'];
      } else if (!renderLabel && (label || children)) {
        var labels = [];

        if (label) {
          labels.push(label);
        }

        if (children) {
          var str = (0, _string.getTextFromReact)(children);

          if (str !== label) {
            labels.push(str);
          }
        }

        ariaLabel = labels.join(' ');
      } // Fix for ESLint error: The attribute aria-checked is not supported by the role textbox. This role is implicit on the element input  jsx-a11y/role-supports-aria-props


      if (inputType && !otherProps['aria-checked']) {
        otherProps['aria-checked'] = checked;
      }

      return _react["default"].createElement(Element, {
        className: (0, _classnames["default"])(className, {
          'is-invalid': invalid,
          'is-disabled': disabled
        }),
        style: style
      }, _react["default"].createElement("input", (0, _extends2["default"])({
        ref: function ref(el) {
          return _this2.inputRef = el;
        },
        type: inputType,
        className: inputClassName,
        checked: checked,
        disabled: disabled,
        name: name,
        value: value,
        required: required ? true : null,
        readOnly: readOnly,
        onChange: this.handleChange,
        onMouseDown: _events.focusAfterMouseEvent.bind(this, onMouseDown),
        onMouseUp: _events.focusAfterMouseEvent.bind(this, onMouseUp),
        "aria-invalid": invalid || null,
        "aria-label": ariaLabel
      }, (0, _filterDOMProps["default"])(otherProps))), _react["default"].createElement("span", {
        className: markClassName
      }, markIcon), shouldRenderLabel && _react["default"].createElement("span", {
        className: labelClassName
      }, label,
      /* When both label and children are present,
       include a space character so that the text
       doesn't get smushed together. */
      label && children && ' ', children));
    }
  }]);
  return SwitchBase;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  renderLabel: true,
  // defaultChecked is undefined by default so we can repect
  // the value that is passed in without erroneously putting
  // both checked and defaultChecked on the input
  defaultChecked: undefined,
  disabled: false,
  required: false,
  invalid: false,
  readOnly: false,
  onChange: function onChange() {}
}), _temp)) || _class) || _class) || _class;

exports["default"] = SwitchBase;
SwitchBase.displayName = 'SwitchBase';