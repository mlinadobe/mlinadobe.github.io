"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addToast = addToast;
exports.removeToast = removeToast;
exports.success = success;
exports.warning = warning;
exports.error = error;
exports.info = info;
exports.ToastContainer = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _CSSTransition = _interopRequireDefault(require("react-transition-group/CSSTransition"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _timer = _interopRequireDefault(require("../../utils/timer"));

var _Toast = _interopRequireDefault(require("./Toast"));

var _state = require("./state");

var _TransitionGroup = _interopRequireDefault(require("react-transition-group/TransitionGroup"));

require("../style/index.css");

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
var TOAST_TIMEOUT = 5000;
var TOAST_ANIMATION_TIME = 200;
/**
 * @type {Map<Toast, {Timer, int}>}
 * Maps allow us to use objects as keys
 * timer - a Timer object
 * id - a unique integer to identify the toast by, used
 *   to keep the key so React doesn't clobber our DOM and
 *   cause use to lose focus while other elements are
 *   being removed around it
 */

var TOAST_DATA = new Map();

var ToastContainer =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(ToastContainer, _React$Component);

  function ToastContainer() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, ToastContainer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(ToastContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      placement: _state.TOAST_PLACEMENT,
      toasts: []
    });
    return _this;
  }

  (0, _createClass2["default"])(ToastContainer, [{
    key: "timerAction",
    value: function timerAction(toast, action) {
      if (TOAST_DATA.has(toast)) {
        var timer = TOAST_DATA.get(toast).timer;

        if (timer) {
          timer[action]();
        }
      }
    }
  }, {
    key: "add",
    value: function add(toast) {
      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOAST_TIMEOUT;

      if (timeout < 0) {
        timeout = TOAST_TIMEOUT;
      }

      TOAST_DATA.set(toast, {
        timer: timeout === 0 ? null : new _timer["default"](this.remove.bind(this, toast), timeout),
        id: (0, _createId["default"])()
      });
      this.setState({
        toasts: [].concat((0, _toConsumableArray2["default"])(this.state.toasts), [toast])
      });
    }
  }, {
    key: "remove",
    value: function remove(toast, e) {
      var currentToasts = this.state.toasts;
      var toasts = currentToasts.filter(function (t) {
        return t !== toast;
      });

      if (toasts.length !== currentToasts.length && toast.props.onClose) {
        toast.props.onClose(e);
      }

      this.setState({
        toasts: toasts
      });
      this.timerAction(toast, 'pause');
      TOAST_DATA["delete"](toast);
    }
  }, {
    key: "onFocus",
    value: function onFocus(toast, e) {
      this.timerAction(toast, 'pause');

      if (toast.props.onFocus) {
        toast.props.onFocus();
      }
    }
  }, {
    key: "onBlur",
    value: function onBlur(toast, e) {
      this.timerAction(toast, 'resume');

      if (toast.props.onBlur) {
        toast.props.onBlur();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state$placement = this.state.placement.split(' '),
          _this$state$placement2 = (0, _slicedToArray2["default"])(_this$state$placement, 2),
          position = _this$state$placement2[0],
          containerPlacement = _this$state$placement2[1];

      var className = (0, _classnames["default"])('react-spectrum-ToastContainer', "react-spectrum-ToastContainer--".concat(position), containerPlacement && "react-spectrum-ToastContainer--".concat(containerPlacement));
      return _react["default"].createElement(_TransitionGroup["default"], {
        className: className
      }, this.state.toasts.map(function (toast) {
        return _react["default"].createElement(_CSSTransition["default"], {
          key: TOAST_DATA.get(toast).id,
          classNames: "react-spectrum-Toast-slide-".concat(position),
          timeout: TOAST_ANIMATION_TIME
        }, _react["default"].cloneElement(toast, {
          onClose: _this2.remove.bind(_this2, toast),
          onFocus: _this2.onFocus.bind(_this2, toast),
          onBlur: _this2.onBlur.bind(_this2, toast)
        }));
      }));
    }
  }]);
  return ToastContainer;
}(_react["default"].Component);

exports.ToastContainer = ToastContainer;

function createToastNode(container) {
  var parent = container || document.querySelector('.react-spectrum-provider') || document.body;
  var node = document.createElement('div');
  parent.appendChild(node);
  return node;
}

function ensureToastContainer(container, callback) {
  var toastContainer = _state.TOAST_CONTAINERS.get(container); // Make sure that toastContainer is a real DOM node, not only a memory footprint of previously cached node.


  if (toastContainer && document.body.contains(_reactDom["default"].findDOMNode(toastContainer))) {
    callback(toastContainer);
  } else {
    var toastContainerRef;

    _reactDom["default"].render(_react["default"].createElement(ToastContainer, {
      ref: function ref(_ref) {
        return toastContainerRef = _ref;
      }
    }), createToastNode(container), function () {
      _state.TOAST_CONTAINERS.set(container, toastContainerRef);

      callback(toastContainerRef);
    });
  }
}

function addToast(toast, timeout, container) {
  ensureToastContainer(container, function (toastContainer) {
    return toastContainer.add(toast, timeout);
  });
}

function removeToast(toast, container) {
  ensureToastContainer(container, function (toastContainer) {
    return toastContainer.remove(toast);
  });
}

function success(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  addToast(_react["default"].createElement(_Toast["default"], (0, _extends2["default"])({
    closable: true,
    variant: "success"
  }, options), message), options.timeout, options.container);
}

function warning(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  addToast(_react["default"].createElement(_Toast["default"], (0, _extends2["default"])({
    closable: true,
    variant: "warning"
  }, options), message), options.timeout, options.container);
}

function error(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  addToast(_react["default"].createElement(_Toast["default"], (0, _extends2["default"])({
    closable: true,
    variant: "error"
  }, options), message), options.timeout, options.container);
}

function info(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  addToast(_react["default"].createElement(_Toast["default"], (0, _extends2["default"])({
    closable: true,
    variant: "info"
  }, options), message), options.timeout, options.container);
}