"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _ImageCache = _interopRequireDefault(require("./ImageCache"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

require("../style/index.css");

var _class, _class2, _temp;

var DEFAULT_STATE = {
  src: '',
  loaded: false,
  isPlaceholder: false
};

var Image = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(Image, _React$Component);

  function Image() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, Image);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(Image)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", DEFAULT_STATE);
    return _this;
  }

  (0, _createClass2["default"])(Image, [{
    key: "reset",
    value: function reset() {
      this.setState(DEFAULT_STATE);
    }
  }, {
    key: "loadImage",
    value: function loadImage(src, placeholder) {
      var _this2 = this;

      if (!this.props.cache && !this.props.headers) {
        this.setState({
          src: src,
          loaded: false,
          isPlaceholder: false
        });
        return;
      }

      this._src = src;

      var fromCache = _ImageCache["default"].has(src);

      if (_ImageCache["default"].has(placeholder) && !fromCache) {
        this.setState({
          src: _ImageCache["default"].getCached(placeholder),
          loaded: false,
          isPlaceholder: true
        });
      }

      this._loadCallback = function (err, url) {
        // Ignore result if the image src changed while
        // loading, or the component was unmounted.
        if (_this2._src !== src || !_this2.mounted) {
          return;
        } // Handle loading errors


        if (err) {
          return _this2.onError(err);
        } // Update the state. Mark as already loaded if it was from the cache.


        _this2.setState({
          src: url,
          loaded: fromCache,
          isPlaceholder: _this2.state.isPlaceholder && !fromCache
        });
      };

      _ImageCache["default"].get(src, {
        headers: this.props.headers || {}
      }, this._loadCallback);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      this.loadImage(this.props.src, this.props.placeholder);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _ImageCache["default"].abort(this.props.src, this._loadCallback);

      this.mounted = false;
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      if (props.src !== this.props.src) {
        _ImageCache["default"].abort(this.props.src, this._loadCallback);

        this.reset();
        this.loadImage(props.src, props.placeholder);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.onLoad();
    }
  }, {
    key: "isImageLoaded",
    value: function isImageLoaded() {
      var image = this.imgRef;

      if (!image || !image.complete) {
        return false;
      }

      if (typeof image.naturalWidth !== 'undefined' && image.naturalWidth === 0) {
        return false;
      }

      return true;
    }
  }, {
    key: "onLoad",
    value: function onLoad() {
      var _this3 = this;

      if (this.isImageLoaded()) {
        requestAnimationFrame(function () {
          // Image could have been unmounted or changed between frames, so double check it is still there.
          if (_this3.isImageLoaded()) {
            if (_this3.props.onLoad) {
              _this3.props.onLoad(_this3.imgRef);
            }

            if (!_this3.state.loaded) {
              _this3.setState({
                loaded: true,
                isPlaceholder: false
              });
            }
          }
        });
      }
    }
  }, {
    key: "onError",
    value: function onError(err) {
      if (this.props.onError) {
        this.props.onError(err);
      }

      if (this.state.src) {
        this.reset();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var _this$props = this.props,
          alt = _this$props.alt,
          className = _this$props.className,
          decorative = _this$props.decorative,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["alt", "className", "decorative"]);
      var _this$state = this.state,
          loaded = _this$state.loaded,
          isPlaceholder = _this$state.isPlaceholder,
          src = _this$state.src;

      if (decorative) {
        alt = '';
      }

      if (alt == null) {
        console.warn('Neither the `alt` prop or `decorative` were provided to an image. ' + 'Add `alt` text for screen readers, or enable the `decorative` prop to indicate that the image ' + 'is decorative or redundant with displayed text and should not be annouced by screen readers.');
      }

      return _react["default"].createElement("img", (0, _extends2["default"])({}, (0, _filterDOMProps["default"])(otherProps), {
        className: (0, _classnames["default"])(className, 'react-spectrum-Image', {
          'is-loaded': loaded,
          'is-placeholder': isPlaceholder
        }),
        src: src,
        onLoad: this.onLoad,
        onError: this.onError,
        ref: function ref(r) {
          return _this4.imgRef = r;
        },
        alt: alt
      }));
    }
  }]);
  return Image;
}(_react["default"].Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /** The image url **/
  src: _propTypes["default"].string.isRequired,

  /** Placeholder image to display while the fullsize one is loading, if cached. */
  placeholder: _propTypes["default"].string,

  /** HTTP headers to add to the request for the asset image */
  headers: _propTypes["default"].object,

  /** Whether to use the image cache for the image */
  cache: _propTypes["default"].bool,

  /** Alternate content for screen readers */
  alt: _propTypes["default"].string,

  /** Whether the image is being used for decoration and should not be announced by screen readers */
  decorative: _propTypes["default"].bool,

  /** Load callback triggered when images load */
  onLoad: _propTypes["default"].func
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  cache: false
}), _temp)) || _class) || _class;

exports["default"] = Image;