"use strict";

var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault3(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault3(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault3(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault3(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault3(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault3(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault3(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault3(require("@babel/runtime/helpers/defineProperty"));

var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));

var _autobindDecorator = _interopRequireDefault3(require("autobind-decorator"));

var _Avatar = _interopRequireDefault3(require("../../Avatar"));

var _Button = _interopRequireDefault3(require("../../Button"));

var _classnames = _interopRequireDefault3(require("classnames"));

var _icon = require("../../utils/icon");

var _CrossSmall = _interopRequireDefault3(require("../../Icon/core/CrossSmall"));

var _filterDOMProps = _interopRequireDefault3(require("../../utils/filterDOMProps"));

var _focusRing = require("../../utils/focusRing");

var _intl = require("../../utils/intl");

var _propTypes = _interopRequireDefault3(require("prop-types"));

var _react = _interopRequireDefault3(require("react"));

var _class, _class2, _temp;

var intlMessages = {
  "cs-CZ": (0, _interopRequireDefault2["default"])(require("./../intl/cs-CZ.json"))["default"],
  "da-DK": (0, _interopRequireDefault2["default"])(require("./../intl/da-DK.json"))["default"],
  "de-DE": (0, _interopRequireDefault2["default"])(require("./../intl/de-DE.json"))["default"],
  "en-US": (0, _interopRequireDefault2["default"])(require("./../intl/en-US.json"))["default"],
  "es-ES": (0, _interopRequireDefault2["default"])(require("./../intl/es-ES.json"))["default"],
  "fi-FI": (0, _interopRequireDefault2["default"])(require("./../intl/fi-FI.json"))["default"],
  "fr-FR": (0, _interopRequireDefault2["default"])(require("./../intl/fr-FR.json"))["default"],
  "hu-HU": (0, _interopRequireDefault2["default"])(require("./../intl/hu-HU.json"))["default"],
  "it-IT": (0, _interopRequireDefault2["default"])(require("./../intl/it-IT.json"))["default"],
  "ja-JP": (0, _interopRequireDefault2["default"])(require("./../intl/ja-JP.json"))["default"],
  "ko-KR": (0, _interopRequireDefault2["default"])(require("./../intl/ko-KR.json"))["default"],
  "nb-NO": (0, _interopRequireDefault2["default"])(require("./../intl/nb-NO.json"))["default"],
  "nl-NL": (0, _interopRequireDefault2["default"])(require("./../intl/nl-NL.json"))["default"],
  "pl-PL": (0, _interopRequireDefault2["default"])(require("./../intl/pl-PL.json"))["default"],
  "pt-BR": (0, _interopRequireDefault2["default"])(require("./../intl/pt-BR.json"))["default"],
  "ru-RU": (0, _interopRequireDefault2["default"])(require("./../intl/ru-RU.json"))["default"],
  "sv-SE": (0, _interopRequireDefault2["default"])(require("./../intl/sv-SE.json"))["default"],
  "tr-TR": (0, _interopRequireDefault2["default"])(require("./../intl/tr-TR.json"))["default"],
  "uk-UA": (0, _interopRequireDefault2["default"])(require("./../intl/uk-UA.json"))["default"],
  "zh-CN": (0, _interopRequireDefault2["default"])(require("./../intl/zh-CN.json"))["default"],
  "zh-TW": (0, _interopRequireDefault2["default"])(require("./../intl/zh-TW.json"))["default"]
};

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/tags/index.css");

  require("../../spectrum-css/tags/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/tags/index-lg.css");
} else {
  require("../../spectrum-css/tags/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/tags/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/tags/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/tags/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/tags/multiStops/darkest.css");
var formatMessage = (0, _intl.messageFormatter)(intlMessages);
/**
 * A tag is used to categorize content and display filters.
 */

var Tag = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(Tag, _React$Component);

  function Tag(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Tag);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Tag).call(this, props));
    _this.state = {
      tagFocused: false
    };
    return _this;
  }

  (0, _createClass2["default"])(Tag, [{
    key: "handleButtonFocus",
    value: function handleButtonFocus(e) {
      this.setState({
        tagFocused: true
      });
    }
  }, {
    key: "handleButtonBlur",
    value: function handleButtonBlur(e) {
      this.setState({
        tagFocused: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          value = _this$props.value,
          children = _this$props.children,
          avatar = _this$props.avatar,
          icon = _this$props.icon,
          _this$props$closable = _this$props.closable,
          closable = _this$props$closable === void 0 ? false : _this$props$closable,
          _this$props$disabled = _this$props.disabled,
          disabled = _this$props$disabled === void 0 ? false : _this$props$disabled,
          _this$props$selected = _this$props.selected,
          selected = _this$props$selected === void 0 ? false : _this$props$selected,
          _this$props$invalid = _this$props.invalid,
          invalid = _this$props$invalid === void 0 ? false : _this$props$invalid,
          className = _this$props.className,
          _this$props$onClose = _this$props.onClose,
          onClose = _this$props$onClose === void 0 ? function () {} : _this$props$onClose,
          tabIndex = _this$props.tabIndex,
          role = _this$props.role,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["value", "children", "avatar", "icon", "closable", "disabled", "selected", "invalid", "className", "onClose", "tabIndex", "role"]);
      var tag = this.tag;
      var tagFocused = this.state.tagFocused;
      var removeString = formatMessage('Remove');
      var childContent = children || value;
      var ariaLabel = childContent ? "".concat(removeString, ": ").concat(childContent) : {
        removeString: removeString
      };

      function handleKeyDown(e) {
        switch (e.keyCode) {
          case 46: // delete

          case 8: // backspace

          case 32:
            // space
            onClose(value || children, e);
            e.preventDefault();
            break;
        }
      }

      function handleButtonClick(e) {
        onClose(value || children, e); // If the button is clicked and this is a gridcell it must be a mouse event
        // Set focus to the tag rather than the button as that is where focus manager
        // expects it to be

        if (role === 'gridcell') {
          if (tag) {
            tag.focus();
          }
        }
      }

      return _react["default"].createElement("div", (0, _extends2["default"])({
        ref: function ref(t) {
          _this2.tag = t;
        },
        className: (0, _classnames["default"])('spectrum-Tags-item', {
          'is-selected': selected,
          'is-disabled': disabled,
          'spectrum-Tags-item--deletable': closable,
          'is-invalid': invalid
        }, (0, _defineProperty2["default"])({}, _focusRing.FOCUS_RING_CLASSNAME, tagFocused), className),
        tabIndex: tabIndex,
        "aria-selected": !disabled && selected,
        onKeyDown: !disabled && closable ? function (e) {
          handleKeyDown(e);
        } : null
      }, (0, _filterDOMProps["default"])(otherProps), {
        role: role === 'gridcell' ? 'row' : undefined
      }), avatar && _react["default"].createElement(_Avatar["default"], {
        alt: "",
        src: avatar,
        "aria-hidden": "true"
      }), (0, _icon.cloneIcon)(icon, {
        size: 'S',
        className: 'spectrum-Tags-itemIcon'
      }), _react["default"].createElement("span", {
        role: role,
        className: "spectrum-Tags-itemLabel"
      }, childContent), closable && _react["default"].createElement("span", {
        role: role
      }, _react["default"].createElement(_Button["default"], {
        type: "button",
        tabIndex: role === 'gridcell' || disabled ? '-1' : undefined,
        "aria-label": ariaLabel,
        className: "spectrum-ClearButton--small",
        variant: "clear",
        icon: _react["default"].createElement(_CrossSmall["default"], null),
        title: removeString,
        onClick: !disabled ? function (e) {
          handleButtonClick(e);
        } : null,
        onBlur: this.handleButtonBlur,
        onFocus: this.handleButtonFocus
      })));
    }
  }]);
  return Tag;
}(_react["default"].Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /** Avatar to use in the tag */
  avatar: _propTypes["default"].string,

  /** Whether the tag is removable from the tag list */
  closable: _propTypes["default"].bool,

  /** Function to be executed upon tag closure */
  onClose: _propTypes["default"].func,

  /** Whether the tag is disabled from user interaction */
  disabled: _propTypes["default"].bool,

  /** Icon to use in the tag */
  icon: _propTypes["default"].object,

  /** Whether the tag is selected */
  selected: _propTypes["default"].bool,

  /** Whether the tag ought to be colored red to reflect invalid status */
  invalid: _propTypes["default"].bool
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  closable: false,
  disabled: false,
  selected: false
}), _temp)) || _class;

exports["default"] = Tag;