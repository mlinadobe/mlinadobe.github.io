"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _events = require("../../utils/events");

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _FocusManager = _interopRequireDefault(require("../../utils/FocusManager"));

var _focusRing = _interopRequireDefault(require("../../utils/focusRing"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Tag = _interopRequireDefault(require("./Tag"));

var _class, _class2, _temp;

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/tags/index.css");

  require("../../spectrum-css/tags/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/tags/index-lg.css");
} else {
  require("../../spectrum-css/tags/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/tags/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/tags/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/tags/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/tags/multiStops/darkest.css");

/**
 * A TagList displays a list of Tags
 */
var TAGLIST_SELECTOR = '[role=row]:not([aria-disabled])';
var TAGLIST_SELECTED_SELECTOR = TAGLIST_SELECTOR + '[aria-selected=true]';

var TagList = (0, _convertUnsafeMethod["default"])(_class = (0, _focusRing["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(TagList, _React$Component);

  function TagList() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, TagList);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(TagList)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      selectedIndex: null,
      focused: false
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleFocus", function (e) {
      _this.setState({
        focused: true
      });

      if (_this.props.onFocus) {
        _this.props.onFocus(e);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleBlur", function (e) {
      _this.setState({
        focused: false
      });

      if (_this.props.onBlur) {
        _this.props.onBlur(e);
      }
    });
    return _this;
  }

  (0, _createClass2["default"])(TagList, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ('selectedIndex' in nextProps) {
        this.setState({
          selectedIndex: nextProps.selectedIndex
        });
      }
    }
  }, {
    key: "onClickItem",
    value: function onClickItem(selectedIndex, e) {
      this.setSelectedIndex(selectedIndex, e);
    }
  }, {
    key: "setSelectedIndex",
    value: function setSelectedIndex(selectedIndex, e) {
      var lastSelectedIndex = this.state.selectedIndex; // If selectedIndex is defined on props then this is a controlled component and we shouldn't
      // change our own state.

      if (!('selectedIndex' in this.props)) {
        this.setState({
          selectedIndex: selectedIndex
        });
      }

      if (lastSelectedIndex !== selectedIndex && this.props.onChange) {
        this.props.onChange(selectedIndex, e);
      }
    }
  }, {
    key: "baseChildProps",
    value: function baseChildProps(index) {
      var child = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        props: {}
      };
      var _this$props = this.props,
          readOnly = _this$props.readOnly,
          onClose = _this$props.onClose,
          disabled = _this$props.disabled,
          manageTabIndex = _this$props.manageTabIndex;
      var _this$state = this.state,
          selectedIndex = _this$state.selectedIndex,
          focused = _this$state.focused;
      var tabIndex = selectedIndex === index || !focused && (selectedIndex === null || manageTabIndex === false) ? 0 : -1;
      return {
        key: index,
        selected: !disabled && focused && selectedIndex === index,
        tabIndex: !disabled ? tabIndex : null,
        closable: !readOnly,
        disabled: disabled,
        onClick: (0, _events.chain)(this.getChildOnClick(index), child.props.onClick),
        onFocus: (0, _events.chain)(this.getChildOnFocus(index), child.props.onFocus),
        onClose: onClose,
        role: 'gridcell'
      };
    }
  }, {
    key: "getChildOnClick",
    value: function getChildOnClick(index) {
      if (this.props.disabled) {
        return null;
      }

      var tagListOnClick = this.onClickItem.bind(this, index);
      return function (e) {
        tagListOnClick(e);
      };
    }
  }, {
    key: "getChildOnFocus",
    value: function getChildOnFocus(index) {
      var _this2 = this;

      if (this.props.disabled) {
        return null;
      }

      return function (e) {
        _this2.setSelectedIndex(index, e);

        _this2.handleFocus;
      };
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var _this3 = this;

      if (this.props.values) {
        return this.renderValues();
      }

      return _react["default"].Children.map(this.props.children, function (child, index) {
        return _react["default"].cloneElement(child, _this3.baseChildProps(index, child));
      });
    }
  }, {
    key: "renderValues",
    value: function renderValues() {
      var _this4 = this;

      var values = this.props.values;
      return values.map(function (value, index) {
        return _react["default"].createElement(_Tag["default"], (0, _extends2["default"])({
          value: value
        }, _this4.baseChildProps(index)), value);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          name = _this$props2.name,
          readOnly = _this$props2.readOnly,
          disabled = _this$props2.disabled,
          invalid = _this$props2.invalid,
          manageTabIndex = _this$props2.manageTabIndex,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props2, ["className", "name", "readOnly", "disabled", "invalid", "manageTabIndex"]);
      var focused = this.state.focused;
      var renderedChildren = this.renderChildren();
      return _react["default"].createElement(_FocusManager["default"], {
        itemSelector: TAGLIST_SELECTOR,
        selectedItemSelector: TAGLIST_SELECTED_SELECTOR,
        orientation: "horizontal",
        manageTabIndex: focused || manageTabIndex
      }, _react["default"].createElement("div", (0, _extends2["default"])({}, (0, _filterDOMProps["default"])(otherProps), {
        className: (0, _classnames["default"])('spectrum-Tags', {
          'is-disabled': disabled
        }, className),
        name: name,
        readOnly: readOnly,
        disabled: disabled,
        role: !renderedChildren || !renderedChildren.length ? 'group' : 'grid',
        "aria-atomic": "false",
        "aria-relevant": "additions",
        "aria-live": focused ? 'polite' : 'off',
        "aria-disabled": disabled,
        "aria-invalid": invalid,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur
      }), renderedChildren));
    }
  }]);
  return TagList;
}(_react["default"].Component), (0, _defineProperty2["default"])(_class2, "displayName", 'TagList'), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /** Custom CSS class to add to the tag list */
  className: _propTypes["default"].string,

  /** Whether to disable the tag list */
  disabled: _propTypes["default"].bool,

  /** Name of tag list **/
  name: _propTypes["default"].string,

  /** Function called when focus is taken away from the tag list */
  onBlur: _propTypes["default"].func,

  /** Function called when a tag  in the tag list is closed */
  onClose: _propTypes["default"].func,

  /** Function called when focus is put on the tag list */
  onFocus: _propTypes["default"].func,

  /** Whether the tag list can only be read */
  readOnly: _propTypes["default"].bool,

  /** Initial tags in the tag list */
  values: _propTypes["default"].arrayOf(_propTypes["default"].string),

  /** Whether TagList should use roving tabIndex so that only one item can receive focus at a time. */
  manageTabIndex: _propTypes["default"].bool
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  readOnly: false,
  disabled: false,
  manageTabIndex: true
}), _temp)) || _class) || _class;

exports["default"] = TagList;