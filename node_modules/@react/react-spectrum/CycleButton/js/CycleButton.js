"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Button = _interopRequireDefault(require("../../Button"));

var _classnames = _interopRequireDefault(require("classnames"));

var _icon = require("../../utils/icon");

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _VisuallyHidden = _interopRequireDefault(require("../../VisuallyHidden"));

var _class, _class2, _temp;

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/cyclebutton/index.css");

  require("../../spectrum-css/cyclebutton/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/cyclebutton/index-lg.css");
} else {
  require("../../spectrum-css/cyclebutton/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/cyclebutton/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/cyclebutton/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/cyclebutton/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/cyclebutton/multiStops/darkest.css");

var CycleButton = (0, _convertUnsafeMethod["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(CycleButton, _Component);

  function CycleButton(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, CycleButton);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(CycleButton).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleChange", function (e) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          onAction = _this$props.onAction,
          action = _this$props.action;

      var newAction = _this.getNextAction();

      if (onAction) {
        onAction(_this.state.action, e);
      }

      if (!action) {
        // Only update state with next action if uncontrolled
        _this.setActionState(newAction);
      }

      if (onChange) {
        // Call onChange only for controlled components to broadcast the next action
        onChange(newAction, e);
      }
    });
    var defaultAction = props.defaultAction,
        actions = props.actions,
        _action = props.action; // if action prop is not passed in, uncontrolled component

    var _newAction = _action;

    if (!_action) {
      if (defaultAction) {
        _newAction = defaultAction;
      } else {
        // assign first element in actions array if no action or defaultAction were passed
        _newAction = actions[0].name;
      }
    }

    _this.state = {
      action: _newAction,
      ariaBusy: false,
      ariaLive: 'off'
    };
    return _this;
  }

  (0, _createClass2["default"])(CycleButton, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        ariaLive: 'assertive'
      });
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      this.setActionState(props.action);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.setState({
        ariaLive: 'off'
      });
    }
  }, {
    key: "setActionState",
    value: function setActionState(newAction) {
      var _this2 = this;

      if (newAction && newAction !== this.state.action) {
        this.setState({
          ariaBusy: true
        }, function () {
          return _this2.setState({
            action: newAction
          }, function () {
            return _this2.setState({
              ariaBusy: false
            });
          });
        });
      }
    }
  }, {
    key: "getNextAction",
    value: function getNextAction() {
      var _this3 = this;

      var currentActionIndex = this.props.actions.findIndex(function (e) {
        return e.name === _this3.state.action;
      });
      var nextIndex = currentActionIndex + 1;
      var newAction;

      if (nextIndex < this.props.actions.length) {
        // set action to next element in actions array
        newAction = this.props.actions[nextIndex].name;
      } else {
        // circle back to first element in actions array
        newAction = this.props.actions[0].name;
      }

      return newAction;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          actions = _this$props2.actions,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props2, ["className", "actions"]);
      var _this$state = this.state,
          action = _this$state.action,
          ariaBusy = _this$state.ariaBusy,
          ariaLive = _this$state.ariaLive;
      var currentActionObj = actions.find(function (e) {
        return e.name === action;
      });
      var icon, label;

      try {
        icon = currentActionObj.icon;
        label = currentActionObj.label;
      } catch (e) {
        throw 'Invalid Props';
      } // Don't let native browser change events bubble up to the root div.
      // Otherwise we double dispatch.


      delete otherProps.onChange;
      delete otherProps.action;
      return _react["default"].createElement(_Button["default"], (0, _extends2["default"])({}, otherProps, {
        variant: "action",
        quiet: true,
        className: (0, _classnames["default"])('spectrum-CycleButton', className),
        onClick: this.handleChange,
        "aria-live": ariaLive,
        "aria-relevant": "text",
        "aria-atomic": "true",
        "aria-busy": ariaBusy
      }), _react["default"].createElement(_VisuallyHidden["default"], null, label), (0, _icon.cloneIcon)(icon, {
        size: 'S'
      }));
    }
  }]);
  return CycleButton;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /**
   * Classes to be applied
   */
  className: _propTypes["default"].string,

  /**
   * Contains options for actions
   */
  actions: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    name: _propTypes["default"].string,
    icon: _propTypes["default"].node,
    label: _propTypes["default"].string
  })).isRequired,

  /**
   * Action used for controlled components.
   * This is used to match action.name
   */
  action: _propTypes["default"].string,

  /**
  * Default action for unconrolled components
  */
  defaultAction: _propTypes["default"].string,

  /**
   * Whether the CycleButton is disabled
   */
  disabled: _propTypes["default"].bool,

  /**
   * Function called when CycleButton is clicked
   * Passes next action name from actions list in props
   */
  onChange: _propTypes["default"].func,

  /**
   * Function called when CycleButton is clicked
   * Passes the current action name from actions list in props
   */
  onAction: _propTypes["default"].func
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  onChange: function onChange() {},
  disabled: false
}), _temp)) || _class;

exports["default"] = CycleButton;
CycleButton.displayName = 'CycleButton';