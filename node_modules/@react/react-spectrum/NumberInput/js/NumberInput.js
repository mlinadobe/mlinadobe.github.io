"use strict";

var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault3(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault3(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault3(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault3(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault3(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault3(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault3(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault3(require("@babel/runtime/helpers/defineProperty"));

var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));

var _autobindDecorator = _interopRequireDefault3(require("autobind-decorator"));

var _Button = _interopRequireDefault3(require("../../Button"));

var _events = require("../../utils/events");

var _ChevronDownSmall = _interopRequireDefault3(require("../../Icon/core/ChevronDownSmall"));

var _ChevronUpSmall = _interopRequireDefault3(require("../../Icon/core/ChevronUpSmall"));

var _number = require("../../utils/number");

var _classnames = _interopRequireDefault3(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault3(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault3(require("../../utils/createId"));

var _filterDOMProps = _interopRequireDefault3(require("../../utils/filterDOMProps"));

var _InputGroup = _interopRequireDefault3(require("../../InputGroup"));

var _LiveRegionAnnouncer = _interopRequireDefault3(require("../../utils/LiveRegionAnnouncer"));

var _intl = require("../../utils/intl");

var _propTypes = _interopRequireDefault3(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault3(require("react-dom"));

var _Textfield = _interopRequireDefault3(require("../../Textfield"));

var _class, _class2, _temp;

var intlMessages = {
  "cs-CZ": (0, _interopRequireDefault2["default"])(require("./../intl/cs-CZ.json"))["default"],
  "da-DK": (0, _interopRequireDefault2["default"])(require("./../intl/da-DK.json"))["default"],
  "de-DE": (0, _interopRequireDefault2["default"])(require("./../intl/de-DE.json"))["default"],
  "en-US": (0, _interopRequireDefault2["default"])(require("./../intl/en-US.json"))["default"],
  "es-ES": (0, _interopRequireDefault2["default"])(require("./../intl/es-ES.json"))["default"],
  "fi-FI": (0, _interopRequireDefault2["default"])(require("./../intl/fi-FI.json"))["default"],
  "fr-FR": (0, _interopRequireDefault2["default"])(require("./../intl/fr-FR.json"))["default"],
  "hu-HU": (0, _interopRequireDefault2["default"])(require("./../intl/hu-HU.json"))["default"],
  "it-IT": (0, _interopRequireDefault2["default"])(require("./../intl/it-IT.json"))["default"],
  "ja-JP": (0, _interopRequireDefault2["default"])(require("./../intl/ja-JP.json"))["default"],
  "ko-KR": (0, _interopRequireDefault2["default"])(require("./../intl/ko-KR.json"))["default"],
  "nb-NO": (0, _interopRequireDefault2["default"])(require("./../intl/nb-NO.json"))["default"],
  "nl-NL": (0, _interopRequireDefault2["default"])(require("./../intl/nl-NL.json"))["default"],
  "pl-PL": (0, _interopRequireDefault2["default"])(require("./../intl/pl-PL.json"))["default"],
  "pt-BR": (0, _interopRequireDefault2["default"])(require("./../intl/pt-BR.json"))["default"],
  "ru-RU": (0, _interopRequireDefault2["default"])(require("./../intl/ru-RU.json"))["default"],
  "sv-SE": (0, _interopRequireDefault2["default"])(require("./../intl/sv-SE.json"))["default"],
  "tr-TR": (0, _interopRequireDefault2["default"])(require("./../intl/tr-TR.json"))["default"],
  "uk-UA": (0, _interopRequireDefault2["default"])(require("./../intl/uk-UA.json"))["default"],
  "zh-CN": (0, _interopRequireDefault2["default"])(require("./../intl/zh-CN.json"))["default"],
  "zh-TW": (0, _interopRequireDefault2["default"])(require("./../intl/zh-TW.json"))["default"]
};

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/stepper/index.css");

  require("../../spectrum-css/stepper/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/stepper/index-lg.css");
} else {
  require("../../spectrum-css/stepper/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/stepper/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/stepper/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/stepper/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/stepper/multiStops/darkest.css");
var formatMessage = (0, _intl.messageFormatter)(intlMessages);

var NumberInput = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(NumberInput, _Component);

  function NumberInput(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, NumberInput);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(NumberInput).call(this, props));
    var id = props.id,
        value = props.value,
        defaultValue = props.defaultValue;
    _this.state = {
      focused: false,
      valueInvalid: false,
      inputId: id || (0, _createId["default"])(),
      value: _this.getValue(value, defaultValue)
    };
    return _this;
  }

  (0, _createClass2["default"])(NumberInput, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.textfield) {
        _reactDom["default"].findDOMNode(this.textfield).addEventListener('wheel', this.handleInputScrollWheel, {
          passive: false,
          bubbles: false,
          cancelable: true
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.textfield) {
        _reactDom["default"].findDOMNode(this.textfield).removeEventListener('wheel', this.handleInputScrollWheel);
      }
    }
    /**
     * @private
     * Takes to value and returns the first defined value or equal to zero
     */

  }, {
    key: "getValue",
    value: function getValue(value, defaultValue) {
      if (value || value === 0) {
        return value;
      } else if (defaultValue || defaultValue === 0) {
        return defaultValue;
      }

      return '';
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ('value' in nextProps) {
        this.setState({
          value: this.getValue(nextProps.value),
          valueInvalid: this.isInputValueInvalid(nextProps.value)
        });
      }

      if ('defaultValue' in nextProps) {
        this.setState({
          valueInvalid: this.isInputValueInvalid(nextProps.defaultValue)
        });
      }
    }
  }, {
    key: "onMouseDown",
    value: function onMouseDown(e) {
      e.preventDefault(); // Don't shift focus to textfield when increment/decrement button is pressed on a mobile device.

      !this.flagTouchStart && this.textfield.focus();
    }
    /**
    * Keep track of when increment/decrement button is pressed on a mobile device.
    */

  }, {
    key: "onTouchStart",
    value: function onTouchStart() {
      this.flagTouchStart = true;
    }
  }, {
    key: "handleDecrementButtonClick",
    value: function handleDecrementButtonClick(e) {
      e.preventDefault();
      this.decrementValue();
    }
  }, {
    key: "handleIncrementButtonClick",
    value: function handleIncrementButtonClick(e) {
      e.preventDefault();
      this.incrementValue();
    }
  }, {
    key: "handleFocus",
    value: function handleFocus() {
      this.setState({
        focused: true
      });
    }
  }, {
    key: "handleBlur",
    value: function handleBlur() {
      this.flagTouchStart = false;
      this.setState({
        focused: false
      });

      _LiveRegionAnnouncer["default"].clearMessage();
    }
  }, {
    key: "handleInputKeyDown",
    value: function handleInputKeyDown(e) {
      switch (e.keyCode) {
        case 38: // up arrow

        case 33:
          // page up
          e.preventDefault();
          this.incrementValue();
          break;

        case 40: // down arrow

        case 34:
          // page down
          e.preventDefault();
          this.decrementValue();
          break;

        case 35:
          // end
          e.preventDefault();
          this.decrementToMinValue();
          break;

        case 36:
          // home
          e.preventDefault();
          this.incrementToMaxValue();
          break;

        default: // do nothing

      }
    }
  }, {
    key: "handleInputScrollWheel",
    value: function handleInputScrollWheel(e) {
      e.preventDefault(); // If the input isn't supposed to receive input, do nothing.

      if (this.isInactive()) {
        return;
      }

      if (e.deltaY < 0) {
        this.incrementValue();
      } else {
        this.decrementValue();
      }
    }
  }, {
    key: "handleInputChange",
    value: function handleInputChange(value, e) {
      e.stopPropagation();
      var onChange = this.props.onChange;
      var valueAsNumber = value === '' ? null : +value;
      var numeric = !isNaN(valueAsNumber); // They may be starting to type a negative number, we don't want to broadcast this to
      // the onChange handler, but we do want to update the value state.

      var resemblesNumber = numeric || value === '-' || value === ''; // Only dispatch a change event if it's an actual number

      if (numeric || value === '') {
        onChange(valueAsNumber);
      }

      if (resemblesNumber) {
        this.setState({
          value: value,
          valueInvalid: this.isInputValueInvalid(value)
        });
      }
    }
    /**
     * @private
     * Returns true if the Textfield cannot receive any input.
     */

  }, {
    key: "isInactive",
    value: function isInactive() {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly;
      var focused = this.state.focused;
      return disabled || readOnly || !focused;
    }
    /**
     * @private
     * Adds step number to the value number so long as it stays within min/max (if they are defined).
     * If value is undefined, sets it to the step.
     */

  }, {
    key: "incrementValue",
    value: function incrementValue() {
      var _this$props2 = this.props,
          min = _this$props2.min,
          max = _this$props2.max,
          step = _this$props2.step;
      var value = this.state.value;

      if (isNaN(step)) {
        step = 1;
      }

      var newValue = +value;

      if (isNaN(newValue)) {
        newValue = max != null ? Math.min(step, max) : step;
      } else {
        newValue = (0, _number.clamp)((0, _number.handleDecimalOperation)('+', newValue, step), min, max);
      }

      this.triggerChange(newValue);
    }
    /**
     * @private
     * If max is defined, sets value to the max value.
     */

  }, {
    key: "incrementToMaxValue",
    value: function incrementToMaxValue() {
      var max = this.props.max; // If the input isn't supposed to receive input, do nothing.

      if (this.isInactive()) {
        return;
      }

      if (max != null) {
        this.triggerChange(max);
      }
    }
    /**
     * @private
     * Subtracts step number from the value number so long as it stays within min/max (if they are
     * defined). If value is undefined, sets it to the step.
     */

  }, {
    key: "decrementValue",
    value: function decrementValue() {
      var _this$props3 = this.props,
          min = _this$props3.min,
          max = _this$props3.max,
          step = _this$props3.step;
      var value = this.state.value;

      if (isNaN(step)) {
        step = 1;
      }

      var newValue = +value;

      if (isNaN(newValue)) {
        newValue = min != null ? Math.max(-step, min) : -step;
      } else {
        newValue = (0, _number.clamp)((0, _number.handleDecimalOperation)('-', newValue, step), min, max);
      }

      this.triggerChange(newValue);
    }
    /**
     * @private
     * If min is defined, sets value to the max value.
     */

  }, {
    key: "decrementToMinValue",
    value: function decrementToMinValue() {
      var min = this.props.min; // If the input isn't supposed to receive input, do nothing.

      if (this.isInactive()) {
        return;
      }

      if (min != null) {
        this.triggerChange(min);
      }
    }
    /**
     * @private
     * Updates state to the new value and notifies the onChange handler.
     */

  }, {
    key: "triggerChange",
    value: function triggerChange(newValue) {
      var onChange = this.props.onChange;
      var value = this.state.value; // Only trigger change event and setState if the value changed

      if (value !== newValue) {
        // Announce new value using a live region
        _LiveRegionAnnouncer["default"].announceAssertive(newValue.toString());

        this.setState({
          value: newValue,
          valueInvalid: this.isInputValueInvalid(newValue)
        });
        onChange(newValue);
      }
    }
    /**
     * @private
     * If true, the input's value is currently invalid.
     */

  }, {
    key: "isInputValueInvalid",
    value: function isInputValueInvalid(value) {
      var _this$props4 = this.props,
          max = _this$props4.max,
          min = _this$props4.min;
      return value !== '' && isNaN(+value) || max !== null && value > max || min !== null && value < min;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props5 = this.props,
          defaultValue = _this$props5.defaultValue,
          _this$props5$placehol = _this$props5.placeholder,
          placeholder = _this$props5$placehol === void 0 ? formatMessage('Enter a number') : _this$props5$placehol,
          min = _this$props5.min,
          max = _this$props5.max,
          step = _this$props5.step,
          _this$props5$decremen = _this$props5.decrementTitle,
          decrementTitle = _this$props5$decremen === void 0 ? formatMessage('Decrement') : _this$props5$decremen,
          _this$props5$incremen = _this$props5.incrementTitle,
          incrementTitle = _this$props5$incremen === void 0 ? formatMessage('Increment') : _this$props5$incremen,
          invalid = _this$props5.invalid,
          disabled = _this$props5.disabled,
          quiet = _this$props5.quiet,
          className = _this$props5.className,
          readOnly = _this$props5.readOnly,
          ariaLabel = _this$props5['aria-label'],
          ariaLabelledby = _this$props5['aria-labelledby'],
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props5, ["defaultValue", "placeholder", "min", "max", "step", "decrementTitle", "incrementTitle", "invalid", "disabled", "quiet", "className", "readOnly", "aria-label", "aria-labelledby"]);
      var _this$state = this.state,
          focused = _this$state.focused,
          value = _this$state.value,
          valueInvalid = _this$state.valueInvalid,
          inputId = _this$state.inputId;
      return _react["default"].createElement(_InputGroup["default"], {
        focused: focused,
        invalid: invalid,
        quiet: quiet,
        disabled: disabled,
        className: (0, _classnames["default"])('spectrum-Stepper', 'react-spectrum-Stepper', {
          'spectrum-Stepper--quiet': quiet
        }, className),
        role: "group",
        "aria-label": ariaLabel || null,
        "aria-labelledby": ariaLabelledby || null
      }, _react["default"].createElement(_Textfield["default"], (0, _extends2["default"])({}, (0, _filterDOMProps["default"])(otherProps), {
        ref: function ref(t) {
          return _this2.textfield = t;
        },
        className: "spectrum-Stepper-input",
        id: inputId,
        value: value,
        defaultValue: defaultValue,
        type: "number",
        autoComplete: "off",
        "aria-label": ariaLabel || null,
        "aria-labelledby": ariaLabelledby || null,
        "aria-valuenow": value || value === 0 ? value : null,
        "aria-valuetext": value || value === 0 ? value : null,
        "aria-valuemin": min,
        "aria-valuemax": max,
        validationState: invalid || valueInvalid ? 'invalid' : null,
        step: step,
        placeholder: placeholder,
        disabled: disabled,
        readOnly: readOnly,
        quiet: quiet,
        onKeyDown: (0, _events.chain)(otherProps.onKeyDown, this.handleInputKeyDown),
        onFocus: (0, _events.chain)(otherProps.onFocus, this.handleFocus),
        onBlur: (0, _events.chain)(otherProps.onBlur, this.handleBlur),
        onChange: this.handleInputChange
      })), _react["default"].createElement("span", {
        className: "spectrum-Stepper-buttons",
        role: "presentation",
        onMouseDown: this.onMouseDown,
        onMouseUp: this.onMouseUp,
        onTouchStart: this.onTouchStart
      }, _react["default"].createElement(_Button["default"], {
        className: "spectrum-Stepper-stepUp",
        type: "button",
        tabIndex: "-1",
        "aria-controls": inputId,
        variant: "action",
        quiet: quiet,
        title: incrementTitle,
        "aria-label": incrementTitle,
        disabled: disabled || max != null && value >= max || readOnly,
        onClick: this.handleIncrementButtonClick,
        onMouseDown: function onMouseDown(e) {
          return e.preventDefault();
        },
        onMouseUp: function onMouseUp(e) {
          return e.preventDefault();
        },
        onFocus: this.handleFocus,
        onBlur: this.handleBlur
      }, _react["default"].createElement(_ChevronUpSmall["default"], {
        size: null,
        className: "spectrum-Stepper-stepUpIcon"
      })), _react["default"].createElement(_Button["default"], {
        className: "spectrum-Stepper-stepDown",
        type: "button",
        tabIndex: "-1",
        "aria-controls": inputId,
        variant: "action",
        quiet: quiet,
        title: decrementTitle,
        "aria-label": decrementTitle,
        disabled: disabled || min != null && value <= min || readOnly,
        onClick: this.handleDecrementButtonClick,
        onMouseDown: function onMouseDown(e) {
          return e.preventDefault();
        },
        onMouseUp: function onMouseUp(e) {
          return e.preventDefault();
        },
        onFocus: this.handleFocus,
        onBlur: this.handleBlur
      }, _react["default"].createElement(_ChevronDownSmall["default"], {
        size: null,
        className: "spectrum-Stepper-stepDownIcon"
      }))));
    }
  }]);
  return NumberInput;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /**
   * The default value.
   */
  defaultValue: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /**
   * Puts component into a controlled state.
   */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /**
   * The minimal value.
   */
  min: _propTypes["default"].number,

  /**
   * The maximum value.
   */
  max: _propTypes["default"].number,

  /**
   * The placeholder.
   */
  placeholder: _propTypes["default"].string,

  /**
   * Increment/decrement by step based on the current value. This differs from the w3 spec,
   * which will increment/decrement to the next multiple of the current step, regardless of current value.
   */
  step: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].oneOf(['any'])]),

  /**
   * Whether the input is disabled.
   */
  disabled: _propTypes["default"].bool,

  /**
   * Whether the input is invalid. Will display a red border around the input.
   */
  invalid: _propTypes["default"].bool,

  /**
   * Whether the input is read only.
   */
  readOnly: _propTypes["default"].bool,

  /**
   * Should be a localized string, it's the tooltip and what a screenreader will announce for the decrement button.
   */
  decrementTitle: _propTypes["default"].string,

  /**
   * Should be a localized string, it's the tooltip and what a screenreader will announce for the increment button.
   */
  incrementTitle: _propTypes["default"].string,

  /**
   * The callback function when the input number is changed.
   */
  onChange: _propTypes["default"].func,

  /**
   * Whether the input should render using a quiet variant
   */
  quiet: _propTypes["default"].bool
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  step: 1,
  disabled: false,
  invalid: false,
  readOnly: false,
  onChange: function onChange() {}
}), _temp)) || _class) || _class;

exports["default"] = NumberInput;