"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _getBoundingClientRect = require("./getBoundingClientRect");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _TabLine = _interopRequireDefault(require("./TabLine"));

var _TabListBase = _interopRequireDefault(require("./TabListBase"));

var _TabListDropdown = _interopRequireDefault(require("./TabListDropdown"));

require("../style/index.css");

var _class, _class2, _temp;

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/tabs/index.css");

  require("../../spectrum-css/tabs/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/tabs/index-lg.css");
} else {
  require("../../spectrum-css/tabs/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/tabs/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/tabs/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/tabs/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/tabs/multiStops/darkest.css");
// For backward compatibility
var VARIANTS = {
  'panel': '',
  'anchored': '',
  'page': 'compact'
};
/**
 * A TabList displays a list of tabs
 */

var TabList = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(TabList, _React$Component);

  function TabList(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, TabList);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TabList).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      selectedIndex: _TabListBase["default"].getDefaultSelectedIndex(_this.props),
      tabArray: [],
      tooNarrow: false
    });
    _this.debouncedResizeUpdate = null;
    return _this;
  }

  (0, _createClass2["default"])(TabList, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ('selectedIndex' in nextProps) {
        this.setState({
          selectedIndex: nextProps.selectedIndex
        });
      }

      if (this.state.selectedIndex >= _react["default"].Children.toArray(nextProps.children).length) {
        this.onChange(_TabListBase["default"].getDefaultSelectedIndex(nextProps));
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('resize', this.resizeListener);
      this.updateTabs();
      this.widthCheck();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.resizeListener);
      this.clearDebouncedResizeUpdateInterval();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.children !== this.props.children) {
        this.updateTabs();
        this.widthCheck();
      }
    }
  }, {
    key: "resizeListener",
    value: function resizeListener() {
      var _this2 = this;

      if (!this.debouncedResizeUpdate) {
        this.debouncedResizeUpdate = setTimeout(function () {
          _this2.widthCheck();

          _this2.debouncedResizeUpdate = null;
        }, 50);
      }
    }
  }, {
    key: "clearDebouncedResizeUpdateInterval",
    value: function clearDebouncedResizeUpdateInterval() {
      if (this.debouncedResizeUpdate) {
        clearTimeout(this.debouncedResizeUpdate);
        this.debouncedResizeUpdate = null;
      }
    } // will need to change to left probably if dealing with rtl

  }, {
    key: "getFurthestPoint",
    value: function getFurthestPoint(elem) {
      return (0, _getBoundingClientRect.getBoundingClientRect)(elem).right;
    }
  }, {
    key: "widthCheck",
    value: function widthCheck() {
      var tabList = _reactDom["default"].findDOMNode(this); // since tab array is in state, we don't necessarily have the most recent if we just use
      // state.tabArray, so get the tabs for the width check


      var tabs = _reactDom["default"].findDOMNode(this).querySelectorAll('.spectrum-Tabs-item');

      var farEdgeTabList = this.getFurthestPoint(tabList);
      var farEdgeLastTab = this.getFurthestPoint(tabs[tabs.length - 1]);

      if (farEdgeTabList < farEdgeLastTab) {
        this.setState({
          tooNarrow: true
        });
      } else {
        this.setState({
          tooNarrow: false
        });
      }
    }
  }, {
    key: "updateTabs",
    value: function updateTabs() {
      // Measure the tabs so we can position the line below correctly
      var tabArray = _reactDom["default"].findDOMNode(this).querySelectorAll('.spectrum-Tabs-item');

      this.setState({
        tabArray: tabArray
      });
    }
  }, {
    key: "onChange",
    value: function onChange(selectedIndex) {
      var lastSelectedIndex = this.state.selectedIndex; // If selectedIndex is defined on props then this is a controlled component and we shouldn't
      // change our own state.

      if (!('selectedIndex' in this.props)) {
        this.setState({
          selectedIndex: selectedIndex
        });
      }

      if (lastSelectedIndex !== selectedIndex && this.props.onChange) {
        this.props.onChange(selectedIndex);
      }
    }
  }, {
    key: "getTabList",
    value: function getTabList() {
      var _classNames;

      var _this$props = this.props,
          className = _this$props.className,
          _this$props$orientati = _this$props.orientation,
          orientation = _this$props$orientati === void 0 ? 'horizontal' : _this$props$orientati,
          _this$props$variant = _this$props.variant,
          variant = _this$props$variant === void 0 ? '' : _this$props$variant,
          quiet = _this$props.quiet,
          children = _this$props.children,
          defaultSelectedIndex = _this$props.defaultSelectedIndex,
          collapsible = _this$props.collapsible,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["className", "orientation", "variant", "quiet", "children", "defaultSelectedIndex", "collapsible"]);
      var _this$state = this.state,
          selectedIndex = _this$state.selectedIndex,
          tabArray = _this$state.tabArray,
          tooNarrow = _this$state.tooNarrow;
      var selectedTab = tabArray[selectedIndex]; // For backwards compatibility
      // let mappedVariant = VARIANTS[variant] !== undefined ? VARIANTS[variant] : variant;

      if (VARIANTS[variant] != null) {
        var message = "The \"".concat(variant, "\" variant of TabList has been deprecated.");

        if (VARIANTS[variant]) {
          message += " Please use the \"".concat(VARIANTS[variant], "\" variant instead.");
        } else {
          message += ' Please remove the variant prop to use the default variant instead.';
        }

        console.warn(message);
        variant = VARIANTS[variant];
      }

      var tooNarrowProps = {};
      var shouldHide = false;

      if (collapsible && tooNarrow && orientation !== 'vertical') {
        tooNarrowProps['aria-hidden'] = tooNarrow;
        shouldHide = true;
      }

      return _react["default"].createElement(_TabListBase["default"], (0, _extends2["default"])({}, tooNarrowProps, {
        orientation: orientation,
        defaultSelectedIndex: defaultSelectedIndex || null,
        selectedIndex: selectedIndex
      }, otherProps, {
        className: (0, _classnames["default"])('spectrum-Tabs', "spectrum-Tabs--".concat(orientation), (_classNames = {
          'spectrum-Tabs--quiet': quiet
        }, (0, _defineProperty2["default"])(_classNames, "spectrum-Tabs--".concat(variant), variant), (0, _defineProperty2["default"])(_classNames, 'react-spectrum-Tabs--container', collapsible), (0, _defineProperty2["default"])(_classNames, 'react-spectrum-Tabs--hidden', shouldHide), _classNames), className),
        onChange: this.onChange
      }), children, selectedTab && _react["default"].createElement(_TabLine["default"], {
        orientation: orientation,
        selectedTab: selectedTab
      }));
    }
  }, {
    key: "getDropdown",
    value: function getDropdown() {
      var _this$props2 = this.props,
          quiet = _this$props2.quiet,
          children = _this$props2.children,
          ariaLabelledby = _this$props2['aria-labelledby'],
          ariaLabel = _this$props2['aria-label'];
      var selectedIndex = this.state.selectedIndex;
      return _react["default"].createElement(_TabListDropdown["default"], {
        className: (0, _classnames["default"])({
          'spectrum-Tabs--quiet': quiet
        }),
        selectedIndex: selectedIndex,
        onChange: this.onChange,
        quiet: quiet,
        "aria-labelledby": ariaLabelledby,
        "aria-label": ariaLabel
      }, children);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          collapsible = _this$props3.collapsible,
          orientation = _this$props3.orientation;
      var tooNarrow = this.state.tooNarrow;

      if (collapsible && orientation !== 'vertical') {
        return _react["default"].createElement("div", {
          className: (0, _classnames["default"])('react-spectrum-Tabs--collapsible')
        }, this.getTabList(), tooNarrow && this.getDropdown());
      } else {
        return this.getTabList();
      }
    }
  }]);
  return TabList;
}(_react["default"].Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /** The visual style of the tab list */
  variant: _propTypes["default"].oneOf(['compact', 'panel', 'anchored', '']),

  /** Whether the tab list should render using a quiet style */
  quiet: _propTypes["default"].bool,

  /** The layout orientation of the tabs */
  orientation: _propTypes["default"].oneOf(['horizontal', 'vertical']),

  /**
   * Whether selection should be 'automatic' when a Tab receives keyboard focus
   * or 'manual' using Enter or Space key to select.
   */
  keyboardActivation: _propTypes["default"].oneOf(['automatic', 'manual']),

  /**
   * The index of the Tab that should be selected (open). When selectedIndex is
   * specified, the component is in a controlled state and a Tab can only be selected by changing the
   * selectedIndex prop value. By default, the first Tab will be selected.
   */
  selectedIndex: _propTypes["default"].number,

  /**
   * The same as selectedIndex except that the component is in an uncontrolled
   * state.
   */
  defaultSelectedIndex: _propTypes["default"].number,

  /**
   * A function that will be called when an Tab is selected or deselected. It will be passed
   * the updated selected index.
   */
  onChange: _propTypes["default"].func,

  /**
   * If the parent is display flex or an explicit width is given to this component, then it can be
   * collapsible and you may set this to true.
   */
  collapsible: _propTypes["default"].bool,

  /**
   * Whether to autoFocus first selected Tab or first Tab.
   */
  autoFocus: _propTypes["default"].bool
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  variant: '',
  quiet: false,
  orientation: 'horizontal',
  collapsible: false,
  autoFocus: false
}), _temp)) || _class) || _class;

exports["default"] = TabList;