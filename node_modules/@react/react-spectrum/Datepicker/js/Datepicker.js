"use strict";

var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault3(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault3(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault3(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault3(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault3(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault3(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault3(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault3(require("@babel/runtime/helpers/defineProperty"));

var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));

var _autobindDecorator = _interopRequireDefault3(require("autobind-decorator"));

var _Button = _interopRequireDefault3(require("../../Button"));

var _Calendar = _interopRequireDefault3(require("../../Calendar"));

var _Calendar2 = _interopRequireDefault3(require("../../Icon/Calendar"));

var _classnames = _interopRequireDefault3(require("classnames"));

var _Clock = _interopRequireDefault3(require("../../Clock"));

var _Clock2 = _interopRequireDefault3(require("../../Icon/Clock"));

var _Close = _interopRequireDefault3(require("../../Icon/Close"));

var _convertUnsafeMethod = _interopRequireDefault3(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault3(require("../../utils/createId"));

var _momentRange = require("moment-range");

var _FieldLabel = _interopRequireDefault3(require("../../FieldLabel"));

var _focusRing = require("../../utils/focusRing");

var _InputGroup = _interopRequireDefault3(require("../../InputGroup"));

var _intl = require("../../utils/intl");

var _moment = _interopRequireDefault3(require("moment"));

var _OverlayTrigger = _interopRequireDefault3(require("../../OverlayTrigger"));

var _Popover = _interopRequireDefault3(require("../../Popover"));

var _propTypes = _interopRequireDefault3(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault3(require("react-dom"));

var _Textfield = _interopRequireDefault3(require("../../Textfield"));

var _moment2 = require("../../utils/moment");

require("../style/index.css");

var _isEmpty = _interopRequireDefault3(require("../../utils/isEmpty"));

var _class, _class2, _temp;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var intlMessages = {
  "cs-CZ": (0, _interopRequireDefault2["default"])(require("./../intl/cs-CZ.json"))["default"],
  "da-DK": (0, _interopRequireDefault2["default"])(require("./../intl/da-DK.json"))["default"],
  "de-DE": (0, _interopRequireDefault2["default"])(require("./../intl/de-DE.json"))["default"],
  "en-US": (0, _interopRequireDefault2["default"])(require("./../intl/en-US.json"))["default"],
  "es-ES": (0, _interopRequireDefault2["default"])(require("./../intl/es-ES.json"))["default"],
  "fi-FI": (0, _interopRequireDefault2["default"])(require("./../intl/fi-FI.json"))["default"],
  "fr-FR": (0, _interopRequireDefault2["default"])(require("./../intl/fr-FR.json"))["default"],
  "hu-HU": (0, _interopRequireDefault2["default"])(require("./../intl/hu-HU.json"))["default"],
  "it-IT": (0, _interopRequireDefault2["default"])(require("./../intl/it-IT.json"))["default"],
  "ja-JP": (0, _interopRequireDefault2["default"])(require("./../intl/ja-JP.json"))["default"],
  "ko-KR": (0, _interopRequireDefault2["default"])(require("./../intl/ko-KR.json"))["default"],
  "nb-NO": (0, _interopRequireDefault2["default"])(require("./../intl/nb-NO.json"))["default"],
  "nl-NL": (0, _interopRequireDefault2["default"])(require("./../intl/nl-NL.json"))["default"],
  "pl-PL": (0, _interopRequireDefault2["default"])(require("./../intl/pl-PL.json"))["default"],
  "pt-BR": (0, _interopRequireDefault2["default"])(require("./../intl/pt-BR.json"))["default"],
  "ru-RU": (0, _interopRequireDefault2["default"])(require("./../intl/ru-RU.json"))["default"],
  "sv-SE": (0, _interopRequireDefault2["default"])(require("./../intl/sv-SE.json"))["default"],
  "tr-TR": (0, _interopRequireDefault2["default"])(require("./../intl/tr-TR.json"))["default"],
  "uk-UA": (0, _interopRequireDefault2["default"])(require("./../intl/uk-UA.json"))["default"],
  "zh-CN": (0, _interopRequireDefault2["default"])(require("./../intl/zh-CN.json"))["default"],
  "zh-TW": (0, _interopRequireDefault2["default"])(require("./../intl/zh-TW.json"))["default"]
};
var DEFAULT_DATE_VAL_FORMAT = 'YYYY-MM-DD';
var DEFAULT_TIME_VAL_FORMAT = 'HH:mm';
var DEFAULT_DATE_TIME_VAL_FORMAT = "".concat(DEFAULT_DATE_VAL_FORMAT, " ").concat(DEFAULT_TIME_VAL_FORMAT);
var SELECTION_TYPES = {
  single: 'single',
  range: 'range'
};
var formatMessage = (0, _intl.messageFormatter)(intlMessages);

var Datepicker = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Datepicker, _Component);

  function Datepicker(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Datepicker);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Datepicker).call(this, props));
    _this.datepickerId = (0, _createId["default"])();
    var value = props.value,
        defaultValue = props.defaultValue,
        displayFormat = props.displayFormat,
        valueFormat = props.valueFormat;

    var newValueFormat = valueFormat || _this.getDefaultValueFormat(props);

    var newDisplayFormat = displayFormat || _this.getDefaultValueFormat(props);

    var val = (0, _moment2.toMoment)(value || defaultValue || '', newValueFormat);
    _this.state = {
      value: val,
      valueText: _this.formatValueToInputText(val, newDisplayFormat),
      valueFormat: newValueFormat,
      displayFormat: newDisplayFormat,
      open: false,
      focused: false,
      invalid: false
    };
    return _this;
  }

  (0, _createClass2["default"])(Datepicker, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var valueFormatChanged = this.props.valueFormat !== nextProps.valueFormat;
      var displayFormatChanged = this.props.displayFormat !== nextProps.displayFormat;
      var valueFormat = valueFormatChanged ? nextProps.valueFormat : this.state.valueFormat;
      var displayFormat = displayFormatChanged ? nextProps.displayFormat : this.state.displayFormat;
      this.setState({
        valueFormat: valueFormat,
        displayFormat: displayFormat
      });

      if ('value' in nextProps) {
        var val = (0, _moment2.toMoment)(nextProps.value, valueFormat);
        this.setState({
          value: val,
          valueText: this.formatValueToInputText(val, displayFormat)
        });
      }
    }
  }, {
    key: "getDefaultValueFormat",
    value: function getDefaultValueFormat(props) {
      var type = props.type;

      switch (type) {
        case 'time':
          return DEFAULT_TIME_VAL_FORMAT;

        case 'datetime':
          return DEFAULT_DATE_TIME_VAL_FORMAT;

        case 'date':
          return DEFAULT_DATE_VAL_FORMAT;

        default:
          throw new Error("".concat(type, " is not a valid type. Must be 'date', 'datetime', or 'time'"));
      }
    }
  }, {
    key: "setValue",
    value: function setValue(valueText, value) {
      var onChange = this.props.onChange;

      if (!('value' in this.props)) {
        this.setState({
          valueText: valueText,
          value: value
        });
      }

      onChange(valueText, value);
    }
  }, {
    key: "formatValueToInputText",
    value: function formatValueToInputText(momentDate) {
      var displayFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.displayFormat;

      if (this.isRange && !(0, _isEmpty["default"])(momentDate) && momentDate.start.isValid() && momentDate.end.isValid()) {
        var startOrEnd = ['start', 'end']; // fix incorrect range order for start and end times on same date

        if (momentDate.end.isBefore(momentDate.start)) {
          startOrEnd = startOrEnd.reverse();
        }

        return {
          start: momentDate[startOrEnd[0]].format(displayFormat),
          end: momentDate[startOrEnd[1]].format(displayFormat)
        };
      } else if (!this.isRange && momentDate && momentDate.isValid()) {
        return momentDate.format(displayFormat);
      }

      return this.isRange ? {
        start: '',
        end: ''
      } : '';
    }
  }, {
    key: "updateDateWithClockTime",
    value: function updateDateWithClockTime(date) {
      var _this$props = this.props,
          type = _this$props.type,
          selectionType = _this$props.selectionType;
      var newDate = date.clone();

      if (type === 'datetime' && this.clockRef) {
        var startTime = this.clockRef.state.value;
        var startTimeIsValid = startTime && startTime.isValid();

        if (selectionType === SELECTION_TYPES.range) {
          if (startTimeIsValid) {
            newDate.start.hours(startTime.hours());
            newDate.start.minutes(startTime.minutes());
            newDate.start.seconds(startTime.seconds());
          }

          var endTime = this.endClockRef.state.value;

          if (endTime && endTime.isValid()) {
            newDate.end.hours(endTime.hours());
            newDate.end.minutes(endTime.minutes());
            newDate.end.seconds(endTime.seconds());
          }
        } else if (startTimeIsValid) {
          newDate.hours(startTime.hours());
          newDate.minutes(startTime.minutes());
          newDate.seconds(startTime.seconds());
        }
      }

      return newDate;
    }
  }, {
    key: "handleCalendarChange",
    value: function handleCalendarChange(date) {
      date = this.updateDateWithClockTime(date);
      this.setValue(this.formatValueToInputText(date), date);
      this.setState({
        invalid: false
      });

      if (this.overlayTriggerRef && this.props.type === 'date') {
        this.overlayTriggerRef.hide();
      } else {
        this.setState({
          open: false
        });
      }
    }
  }, {
    key: "handleClockChange",
    value: function handleClockChange(name, valueText, valueDate) {
      var _this$state = this.state,
          value = _this$state.value,
          valueFormat = _this$state.valueFormat;
      var date = (0, _moment2.toMoment)(valueDate, valueFormat);

      if (date && date.isValid()) {
        if (this.isRange) {
          var newValue = value && value.clone();

          if (!newValue && this.props.type === 'time') {
            newValue = new _momentRange.DateRange(date, date);
          }

          if (newValue && (!value || !newValue[name].isSame(date))) {
            newValue[name] = date;
            this.setValue(this.formatValueToInputText(newValue), newValue);
          }
        } else {
          this.setValue(this.formatValueToInputText(date), date);
        }
      }
    }
  }, {
    key: "handleTextChange",
    value: function handleTextChange(value, e) {
      e.stopPropagation(); // Don't call this.props.onChange. We'll notify that a change happened when the text field is
      // blurred instead. This is done to avoid casting the text into a date object and then have it
      // fed back into the Datepicker. In some cases, if the user is between editing and the change
      // determines an invalid date was typed, the text may suddenly be changed out from under the
      // user, making it very difficult to change the text in the date. Instead just update the
      // internal state of the textfield. This means we don't get a truly controlled textfield, but
      // given the date conversion problems, we don't have any other viable option.

      var valueText = this.isRange ? _objectSpread({}, this.state.valueText, (0, _defineProperty2["default"])({}, e.target.name, value)) : value;
      this.setState({
        valueText: valueText
      });
    }
  }, {
    key: "focus",
    value: function focus() {
      if (this.textfieldRef && !this.props.disabled) {
        this.textfieldRef.focus();
      }
    }
  }, {
    key: "onFocus",
    value: function onFocus(e) {
      this.setState({
        focused: true
      });

      if (this.props.onFocus) {
        this.props.onFocus(e);
      }
    }
  }, {
    key: "handleTextBlur",
    value: function handleTextBlur(e) {
      var _this2 = this;

      var displayFormat = this.state.displayFormat;
      var text = this.isRange ? _objectSpread({}, this.state.valueText, (0, _defineProperty2["default"])({}, e.target.name, e.target.value)) : e.target.value;
      var date = null;
      var invalid = false;

      if (this.isRange && text.start && text.end) {
        var start = (0, _moment["default"])(text.start, displayFormat, true);
        var end = (0, _moment["default"])(text.end, displayFormat, true);
        date = new _momentRange.DateRange(start, end);
        invalid = this.handleValidation(date.start, displayFormat) || this.handleValidation(date.end, displayFormat) || date.start > date.end;
      } else if (!this.isRange && text) {
        date = (0, _moment["default"])(text, displayFormat, true);
        invalid = this.handleValidation(date, displayFormat);
      }

      date = invalid ? null : date;
      this.setValue(text, date);
      this.setState({
        focused: false,
        invalid: invalid
      }, function () {
        if (!_this2.textfieldRef) {
          return;
        } // clean up focus-ring


        var dom = _reactDom["default"].findDOMNode(_this2);

        if (dom) {
          var node = dom.querySelector(".".concat(_focusRing.FOCUS_RING_CLASSNAME));

          if (node) {
            node.classList.remove(_focusRing.FOCUS_RING_CLASSNAME);
          }
        }
      });

      if (this.props.onBlur) {
        this.props.onBlur(e);
      }
    }
  }, {
    key: "handleValidation",
    value: function handleValidation(date, displayFormat) {
      return !date || !date.isValid() || date._f !== displayFormat;
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(e) {
      if (this.props.onKeyDown) {
        this.props.onKeyDown(e); // If defaultPrevented, don't open the Popover.

        if (e.defaultPrevented) {
          return;
        }
      }

      switch (e.key) {
        case 'ArrowDown':
        case 'Down':
          this.overlayTriggerRef.show(e);
          break;
      }
    }
  }, {
    key: "handleHidePopover",
    value: function handleHidePopover() {
      this.setState({
        open: false
      });
    }
  }, {
    key: "handleShowPopover",
    value: function handleShowPopover() {
      this.setState({
        open: true
      });
    }
  }, {
    key: "handlePopoverKeyDown",
    value: function handlePopoverKeyDown(e) {
      if (e.key === 'Enter' && (e.target.tagName === 'INPUT' || this.calendarRef && e.target === this.calendarRef.calendarBody && !this.isRange)) {
        e.stopPropagation();
        this.overlayTriggerRef.hide();
      }
    }
  }, {
    key: "handleClickCloseButton",
    value: function handleClickCloseButton(e) {
      e.preventDefault();
      e.stopPropagation();
      this.overlayTriggerRef.hide(e);
    }
    /**
     * Generates a unique id for a DOM element descendant
     * * @param   {Sting} string String value
     * @returns {String} A unique id
     */

  }, {
    key: "generateId",
    value: function generateId(string) {
      var _this$props$id = this.props.id,
          id = _this$props$id === void 0 ? this.datepickerId : _this$props$id;
      return "".concat(id, "-").concat(string);
    }
  }, {
    key: "setCalendarRef",
    value: function setCalendarRef(c) {
      this.calendarRef = c;
    }
  }, {
    key: "setClockRef",
    value: function setClockRef(c) {
      this.clockRef = c;
    }
  }, {
    key: "setEndClockRef",
    value: function setEndClockRef(c) {
      this.endClockRef = c;
    }
  }, {
    key: "setTextfieldRef",
    value: function setTextfieldRef(t) {
      this.textfieldRef = t;
    }
  }, {
    key: "setEndTextfieldRef",
    value: function setEndTextfieldRef(t) {
      this.endTextfieldRef = t;
    }
  }, {
    key: "setOverlayTriggerRef",
    value: function setOverlayTriggerRef(t) {
      this.overlayTriggerRef = t;
    }
  }, {
    key: "setPopoverRef",
    value: function setPopoverRef(p) {
      this.popoverRef = p;
    }
  }, {
    key: "renderTextfield",
    value: function renderTextfield(props, name) {
      var id = props.id,
          valueText = props.valueText,
          invalid = props.invalid,
          open = props.open,
          ariaLabel = props.ariaLabel,
          ariaLabelledby = props.ariaLabelledby,
          comboboxId = props.comboboxId,
          popoverId = props.popoverId,
          readOnly = props.readOnly,
          disabled = props.disabled,
          otherProps = (0, _objectWithoutProperties2["default"])(props, ["id", "valueText", "invalid", "open", "ariaLabel", "ariaLabelledby", "comboboxId", "popoverId", "readOnly", "disabled"]);

      if (name) {
        if (name === 'end') {
          id = "".concat(id, "-end");
          ariaLabel = formatMessage('End Date');
        } else {
          ariaLabel = formatMessage('Start Date');
        }

        if (ariaLabelledby) {
          ariaLabelledby = "".concat(ariaLabelledby, " ").concat(id);
        } else if (props.ariaLabel) {
          ariaLabelledby = "".concat(comboboxId, " ").concat(id);
        }
      }

      return _react["default"].createElement(_Textfield["default"], (0, _extends2["default"])({
        className: (0, _classnames["default"])('spectrum-InputGroup-field', name && "spectrum-Datepicker-".concat(name, "Field")),
        "aria-invalid": invalid,
        invalid: name !== 'start' ? invalid || this.state.invalid : null,
        value: name ? valueText[name] : valueText,
        name: name,
        ref: name === 'end' ? this.setEndTextfieldRef : this.setTextfieldRef,
        id: id,
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledby,
        "aria-controls": open ? popoverId : null,
        disabled: disabled,
        readOnly: readOnly
      }, otherProps, {
        onChange: !readOnly && !disabled ? this.handleTextChange : null,
        onFocus: !readOnly && !disabled ? this.onFocus : null,
        onBlur: !readOnly && !disabled ? this.handleTextBlur : null,
        onKeyDown: !readOnly && !disabled ? this.handleKeyDown : null
      }));
    }
  }, {
    key: "renderCalendar",
    value: function renderCalendar(props) {
      return _react["default"].createElement(_Calendar["default"], (0, _extends2["default"])({
        className: (0, _classnames["default"])('spectrum-Calendar--padded', this.props.type === 'datetime' && 'react-spectrum-Datepicker-Calendar--datetime')
      }, props, {
        ref: this.setCalendarRef,
        autoFocus: true,
        onChange: this.handleCalendarChange
      }));
    }
  }, {
    key: "renderClock",
    value: function renderClock(props, name) {
      var id = props.id,
          value = props.value,
          otherProps = (0, _objectWithoutProperties2["default"])(props, ["id", "value"]);
      var startOrEnd;
      var fieldLabel;
      var labelId;

      if (name) {
        id = "".concat(id, "-").concat(name);
        fieldLabel = name === 'endTime' ? formatMessage('End Time') : formatMessage('Start Time');
        labelId = "".concat(id, "-label");
        startOrEnd = name.substring(0, name.length - 4);

        if (value) {
          value = value[startOrEnd];
        }

        delete otherProps['aria-label'];
      }

      return _react["default"].createElement("div", {
        className: "react-spectrum-Datepicker-clockContainer"
      }, name && _react["default"].createElement(_FieldLabel["default"], {
        id: labelId,
        labelFor: id,
        label: fieldLabel
      }), _react["default"].createElement(_Clock["default"], (0, _extends2["default"])({}, otherProps, {
        value: value,
        name: name,
        id: id,
        "aria-labelledby": labelId,
        ref: name === 'endTime' ? this.setEndClockRef : this.setClockRef,
        autoFocus: this.props.type === 'time' && name !== 'endTime',
        onChange: this.handleClockChange.bind(this, startOrEnd)
      })));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          _this$props2$id = _this$props2.id,
          id = _this$props2$id === void 0 ? this.datepickerId : _this$props2$id,
          type = _this$props2.type,
          headerFormat = _this$props2.headerFormat,
          max = _this$props2.max,
          min = _this$props2.min,
          startDay = _this$props2.startDay,
          placeholder = _this$props2.placeholder,
          quiet = _this$props2.quiet,
          disabled = _this$props2.disabled,
          invalid = _this$props2.invalid,
          readOnly = _this$props2.readOnly,
          required = _this$props2.required,
          className = _this$props2.className,
          placement = _this$props2.placement,
          selectionType = _this$props2.selectionType,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props2, ["id", "type", "headerFormat", "max", "min", "startDay", "placeholder", "quiet", "disabled", "invalid", "readOnly", "required", "className", "placement", "selectionType"]);
      var _this$state2 = this.state,
          valueText = _this$state2.valueText,
          value = _this$state2.value,
          valueFormat = _this$state2.valueFormat,
          displayFormat = _this$state2.displayFormat,
          focused = _this$state2.focused,
          open = _this$state2.open;
      var ariaLabel = otherProps['aria-label'];
      var ariaLabelledby = otherProps['aria-labelledby'];
      delete otherProps['aria-label'];
      delete otherProps['aria-labelledby']; // We are using state for these.

      delete otherProps.value;
      delete otherProps.defaultValue;
      var comboboxId = this.generateId('combobox');
      var popoverId = this.generateId('popover');
      var buttonId = this.generateId('button');

      var textfieldProps = _objectSpread({
        id: id,
        valueText: valueText,
        invalid: invalid,
        placeholder: placeholder,
        quiet: quiet,
        readOnly: readOnly,
        required: required,
        disabled: disabled,
        open: open,
        ariaLabel: ariaLabel,
        ariaLabelledby: ariaLabelledby,
        comboboxId: comboboxId,
        popoverId: popoverId
      }, otherProps);

      var calendarProps = {
        id: this.generateId('calendar'),
        'aria-label': formatMessage('Calendar'),
        headerFormat: headerFormat,
        max: max,
        min: min,
        startDay: startDay,
        disabled: disabled,
        invalid: invalid,
        readOnly: readOnly,
        required: required,
        value: value,
        valueFormat: valueFormat,
        selectionType: selectionType,
        style: {
          'width': '280px'
        }
      };
      var clockProps = {
        id: this.generateId('clock'),
        'aria-label': formatMessage('Time'),
        value: value,
        valueFormat: valueFormat,
        displayFormat: displayFormat,
        disabled: disabled,
        invalid: invalid,
        readOnly: readOnly,
        required: required
      };
      var triggerAriaLabel = type === 'time' ? formatMessage('Time') : formatMessage('Calendar');
      return _react["default"].createElement(_InputGroup["default"], {
        quiet: quiet,
        disabled: disabled,
        invalid: invalid || this.state.invalid,
        focused: focused,
        id: comboboxId,
        role: "combobox",
        "aria-haspopup": "dialog",
        "aria-expanded": open,
        "aria-owns": open ? popoverId : null,
        "aria-label": this.isRange ? ariaLabel : null,
        "aria-labelledby": this.isRange ? ariaLabelledby : null,
        className: (0, _classnames["default"])('spectrum-Datepicker', 'react-spectrum-Datepicker', this.isRange && 'spectrum-Datepicker--range', this.isRange && type === 'datetime' && 'spectrum-Datepicker--datetimeRange', className)
      }, !this.isRange && this.renderTextfield(textfieldProps), this.isRange && [this.renderTextfield(textfieldProps, 'start'), _react["default"].createElement("div", {
        className: "spectrum-Datepicker--rangeDash"
      }), this.renderTextfield(textfieldProps, 'end')].map(function (el, i) {
        return _react["default"].cloneElement(el, {
          key: i
        });
      }), _react["default"].createElement(_OverlayTrigger["default"], {
        trigger: "click",
        ref: this.setOverlayTriggerRef,
        target: this,
        placement: placement,
        onHide: this.handleHidePopover,
        onShow: this.handleShowPopover,
        delayHide: 0
      }, _react["default"].createElement(_Button["default"], {
        id: buttonId,
        variant: "field",
        quiet: quiet,
        type: "button",
        icon: type === 'time' ? _react["default"].createElement(_Clock2["default"], null) : _react["default"].createElement(_Calendar2["default"], null),
        invalid: invalid || required && !valueText,
        disabled: readOnly || disabled,
        "aria-label": triggerAriaLabel,
        "aria-labelledby": ariaLabelledby ? "".concat(ariaLabelledby, " ").concat(buttonId) : null,
        "aria-haspopup": "dialog",
        "aria-expanded": open,
        "aria-controls": open ? popoverId : null,
        onKeyDown: this.handleKeyDown,
        tabIndex: -1
      }), _react["default"].createElement(_Popover["default"], {
        isDialog: false,
        open: true,
        ref: this.setPopoverRef,
        id: popoverId,
        role: "dialog",
        trapFocus: true,
        "aria-label": triggerAriaLabel,
        onKeyDown: this.handlePopoverKeyDown
      }, _react["default"].createElement("div", null, type !== 'time' && this.renderCalendar(calendarProps), type !== 'date' && (this.isRange ? [this.renderClock(clockProps, 'startTime'), this.renderClock(clockProps, 'endTime')].map(function (el, i) {
        return _react["default"].cloneElement(el, {
          key: i
        });
      }) : this.renderClock(clockProps)), _react["default"].createElement(_Button["default"], {
        className: "react-spectrum-Datepicker-closeButton",
        label: null,
        icon: _react["default"].createElement(_Close["default"], {
          alt: formatMessage('Close'),
          size: "XS"
        }),
        quiet: true,
        variant: "action",
        tabIndex: -1,
        onClick: this.handleClickCloseButton
      })))), this.isRange && focused && _react["default"].createElement("div", {
        className: "spectrum-Datepicker-focusRing",
        role: "presentation"
      }));
    }
  }, {
    key: "isRange",
    get: function get() {
      return this.props.selectionType === SELECTION_TYPES.range;
    }
  }]);
  return Datepicker;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /**
   * Type of datepicker being used
   */
  type: _propTypes["default"].oneOf(['date', 'datetime', 'time']),

  /**
   * Date format for calendar heading
   */
  headerFormat: _propTypes["default"].string,

  /**
   * Maximum date selectable
   */
  max: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object, _propTypes["default"].number]),

  /**
   * Minimum date selectable
   */
  min: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object, _propTypes["default"].number]),

  /**
   * Value component is initally set to
   */
  defaultValue: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object, _propTypes["default"].number, _propTypes["default"].array]),

  /**
   * Puts component into a controlled state
   */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object, _propTypes["default"].number, _propTypes["default"].array]),

  /**
   * Date format value is stored as within the component
   */
  valueFormat: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),

  /**
   * Date format value is displayed with
   */
  displayFormat: _propTypes["default"].string,

  /**
   * Start day refers to what day of the week should be left most, 0 = Sunday, 1 = Monday...
   */
  startDay: _propTypes["default"].oneOf([0, 1, 2, 3, 4, 5, 6]),

  /**
   * Display placeholder value, usually a format hint
   */
  placeholder: _propTypes["default"].string,

  /**
   * Variant quiet for the button and textgroup subcomponents
   */
  quiet: _propTypes["default"].bool,

  /**
   * Disables the component from being selectable
   */
  disabled: _propTypes["default"].bool,

  /**
   * Can't change the date, but user can select to copy the date from the input
   */
  readOnly: _propTypes["default"].bool,

  /**
   * Value is required, for a form
   */
  required: _propTypes["default"].bool,

  /**
   * Value isn't valid, display style
   */
  invalid: _propTypes["default"].bool,

  /**
   * Called when a date is selected or a range is selected
   */
  onChange: _propTypes["default"].func,

  /**
   * Position of the date selection popover, values supported: left, right, top, and bottom
   */
  placement: _propTypes["default"].string,

  /**
   * Select a single date and time or a date range
   */
  selectionType: _propTypes["default"].oneOf([SELECTION_TYPES.single, SELECTION_TYPES.range])
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  type: 'date',
  // date, datetime, time
  headerFormat: 'MMMM YYYY',
  max: null,
  min: null,
  startDay: 0,
  quiet: false,
  disabled: false,
  invalid: false,
  readOnly: false,
  required: false,
  placeholder: 'yyyy-mm-dd',
  onChange: function onChange() {},
  placement: 'right',
  selectionType: SELECTION_TYPES.single
}), _temp)) || _class) || _class;

exports["default"] = Datepicker;