"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _DialogButtons = _interopRequireDefault(require("./DialogButtons"));

var _DialogHeader = _interopRequireDefault(require("./DialogHeader"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _FocusManager = require("../../utils/FocusManager");

var _class, _class2, _temp;

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/dialog/index.css");

  require("../../spectrum-css/dialog/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/dialog/index-lg.css");
} else {
  require("../../spectrum-css/dialog/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/dialog/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/dialog/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/dialog/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/dialog/multiStops/darkest.css");

var Dialog = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Dialog, _Component);

  function Dialog(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Dialog);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Dialog).call(this, props));
    _this.dialogId = (0, _createId["default"])();
    return _this;
  }
  /*
   * Calls the props.onConfirm() or props.onCancel() asynchronously if present,
   * then props.onClose() on any response except false
   */


  (0, _createClass2["default"])(Dialog, [{
    key: "_onAction",
    value: function () {
      var _onAction2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(action) {
        var shouldClose,
            _len,
            args,
            _key,
            _args = arguments;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                shouldClose = true;

                if (!action) {
                  _context.next = 6;
                  break;
                }

                for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = _args[_key];
                }

                _context.next = 5;
                return action.apply(void 0, args);

              case 5:
                shouldClose = _context.sent;

              case 6:
                if (shouldClose !== false) {
                  this.props.onClose();
                }

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _onAction(_x) {
        return _onAction2.apply(this, arguments);
      }

      return _onAction;
    }()
  }, {
    key: "onConfirm",
    value: function onConfirm() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this._onAction.apply(this, [this.props.onConfirm].concat(args));
    }
  }, {
    key: "onCancel",
    value: function onCancel() {
      this._onAction(this.props.onCancel);
    }
  }, {
    key: "onFocus",
    value: function onFocus(e) {
      if (this.props.onFocus) {
        this.props.onFocus(e);
      }
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(e) {
      var _this$props = this.props,
          confirmDisabled = _this$props.confirmDisabled,
          keyboardConfirm = _this$props.keyboardConfirm,
          onKeyDown = _this$props.onKeyDown,
          disableEscKey = _this$props.disableEscKey;

      if (onKeyDown) {
        onKeyDown(e); // Do nothing if stopPropagation has been called on event after onKeyDown prop executes.

        if (e.isPropagationStopped && e.isPropagationStopped()) {
          return;
        }
      }

      switch (e.key) {
        case 'Enter':
          if (!confirmDisabled && keyboardConfirm) {
            this.onConfirm();
          }

          break;

        case 'Esc':
        case 'Escape':
          if (!disableEscKey) {
            this.onCancel();
          }

          break;

        default:
          if (this.props.trapFocus) {
            (0, _FocusManager.trapFocus)(this, e);
          }

          break;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props2 = this.props,
          children = _this$props2.children,
          _this$props2$classNam = _this$props2.className,
          className = _this$props2$classNam === void 0 ? '' : _this$props2$classNam,
          cancelLabel = _this$props2.cancelLabel,
          confirmLabel = _this$props2.confirmLabel,
          secondaryLabel = _this$props2.secondaryLabel,
          open = _this$props2.open,
          title = _this$props2.title,
          variant = _this$props2.variant,
          mode = _this$props2.mode,
          role = _this$props2.role,
          tabIndex = _this$props2.tabIndex,
          trapFocus = _this$props2.trapFocus,
          isDismissible = _this$props2.isDismissible,
          _this$props2$id = _this$props2.id,
          id = _this$props2$id === void 0 ? this.dialogId : _this$props2$id,
          ariaLabel = _this$props2['aria-label'],
          ariaLabelledby = _this$props2['aria-labelledby'],
          ariaDescribedby = _this$props2['aria-describedby'],
          ariaModal = _this$props2['aria-modal'],
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props2, ["children", "className", "cancelLabel", "confirmLabel", "secondaryLabel", "open", "title", "variant", "mode", "role", "tabIndex", "trapFocus", "isDismissible", "id", "aria-label", "aria-labelledby", "aria-describedby", "aria-modal"]);
      var fullscreen = mode === 'fullscreen' || mode === 'fullscreenTakeover';
      var derivedVariant = variant || (cancelLabel && confirmLabel ? 'confirmation' : 'information');
      delete otherProps.modalContent;
      delete otherProps.disableEscKey;
      return (// eslint-disable-next-line jsx-a11y/no-static-element-interactions
        _react["default"].createElement("div", {
          className: (0, _classnames["default"])('spectrum-Dialog', 'react-spectrum-Dialog', (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "spectrum-Dialog--".concat(mode), mode), (0, _defineProperty2["default"])(_classNames, 'spectrum-Dialog--error', variant === 'error'), (0, _defineProperty2["default"])(_classNames, 'is-open', open), (0, _defineProperty2["default"])(_classNames, 'spectrum-Dialog--dismissible', isDismissible), _classNames), className),
          role: role
          /* eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex */
          ,
          tabIndex: tabIndex === undefined || trapFocus ? 1 : tabIndex,
          onFocus: this.onFocus,
          onKeyDown: this.onKeyDown,
          id: id,
          "aria-label": ariaLabel,
          "aria-labelledby": ariaLabelledby || (title && !ariaLabel ? "".concat(id, "-heading") : null),
          "aria-describedby": ariaDescribedby || (title && children ? "".concat(id, "-content") : null),
          "aria-modal": ariaModal || trapFocus
        }, title && _react["default"].createElement(_DialogHeader["default"], (0, _extends2["default"])({
          variant: derivedVariant,
          title: title,
          fullscreen: fullscreen,
          confirmLabel: confirmLabel,
          secondaryLabel: secondaryLabel,
          cancelLabel: cancelLabel,
          isDismissible: isDismissible,
          id: "".concat(id, "-heading")
        }, otherProps, {
          onConfirm: this.onConfirm,
          onCancel: this.onCancel
        })), title ? _react["default"].createElement("div", {
          className: "spectrum-Dialog-content",
          id: "".concat(id, "-content")
        }, children) : children, !isDismissible && !fullscreen && confirmLabel && _react["default"].createElement(_DialogButtons["default"], (0, _extends2["default"])({}, this.props, {
          variant: derivedVariant,
          className: "spectrum-Dialog-footer",
          onConfirm: this.onConfirm,
          onCancel: this.onCancel
        })))
      );
    }
  }]);
  return Dialog;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /**
   * Can dismiss by clicking on the backdrop
   */
  backdropClickable: _propTypes["default"].bool,

  /**
   * Label of the cancel button
   */
  cancelLabel: _propTypes["default"].string,

  /**
   * String of custom class names to add to the top level dom element of Dialog
   */
  className: _propTypes["default"].string,

  /**
   * Confirm button is disabled
   */
  confirmDisabled: _propTypes["default"].bool,

  /**
   * Label of the confirm button
   */
  confirmLabel: _propTypes["default"].string,

  /**
   * Label for an additional button
   */
  secondaryLabel: _propTypes["default"].string,

  /**
   * Callback when dialog closes
   */
  onClose: _propTypes["default"].func,

  /**
   * Callback when cancel button clicked
   */
  onCancel: _propTypes["default"].func,

  /**
   * Callback when confim button clicked. Has a paramater specifying which
   * confirm button is clicked, "primary" or "secondary".
   */
  onConfirm: _propTypes["default"].func,

  /**
   * Have dialog opened when mounted to DOM
   */
  open: _propTypes["default"].bool,

  /**
   * Title of the dialog
   */
  title: _propTypes["default"].node,

  /**
   * Affects the style used by the dialog, establishing its type
   */
  variant: _propTypes["default"].oneOf(['confirmation', 'information', 'destructive', 'error']),

  /**
   *  Affects the display size of the dialog
   */
  mode: _propTypes["default"].oneOf(['alert', 'fullscreen', 'fullscreenTakeover']),

  /**
   * For ARIA telling what type of dialog this is
   */
  role: _propTypes["default"].oneOf(['dialog', 'alertdialog']),

  /**
   * Which button should be autoFocused after mounted to DOM
   */
  autoFocusButton: _propTypes["default"].oneOf(['cancel', 'confirm', 'secondary', null]),

  /**
   * When true, allows user to press enter key and trigger confirm event and close dialog.
   * When false, the user can still use keyboard navigation to close via the comfirm button.
   */
  keyboardConfirm: _propTypes["default"].bool,

  /**
   * Keeps focus from escaping dialog
   */
  trapFocus: _propTypes["default"].bool,

  /**
   * When true, the Esc key will not close the Dialog or trigger an onCancel event.
   * Use for rare cases when a Dialog requires confirmation before being dismissed.
   */
  disableEscKey: _propTypes["default"].bool,

  /**
   * Whether it is a dismissible dialogs. Dismissible dialogs should not have buttons.
   */
  isDismissible: _propTypes["default"].bool
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  backdropClickable: false,
  confirmDisabled: false,
  keyboardConfirm: false,
  open: true,
  role: 'dialog',
  autoFocusButton: null,
  onClose: function onClose() {},
  trapFocus: true,
  disableEscKey: false,
  isDismissible: false
}), _temp)) || _class;

exports["default"] = Dialog;