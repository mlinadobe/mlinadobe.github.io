"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _List = require("../../List");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _class, _class2, _temp;

var SelectList = (0, _convertUnsafeMethod["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(SelectList, _Component);

  function SelectList(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, SelectList);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(SelectList).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderListOfOptions", function (options) {
      return options.map(function (option, index) {
        return _react["default"].createElement(_List.ListItem, {
          key: index,
          icon: option.icon,
          selected: _this.isSelected(option),
          disabled: _this.props.disabled || option.disabled,
          onSelect: _this.handleSelect.bind((0, _assertThisInitialized2["default"])(_this), option)
        }, _this.props.renderItem ? _this.props.renderItem(option) : option.label);
      });
    });
    _this.state = {
      value: props.value
    };
    return _this;
  }

  (0, _createClass2["default"])(SelectList, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      if (props.value && props.value !== this.state.value) {
        this.setState({
          value: props.value
        });
      }
    }
  }, {
    key: "addSelection",
    value: function addSelection(option) {
      return [].concat((0, _toConsumableArray2["default"])(this.state.value || []), [option.value]);
    }
  }, {
    key: "removeSelection",
    value: function removeSelection(option) {
      var value = this.state.value || [];
      var index = value.indexOf(option.value);
      return [].concat((0, _toConsumableArray2["default"])(value.slice(0, index)), (0, _toConsumableArray2["default"])(value.slice(index + 1, value.length)));
    }
  }, {
    key: "handleSelect",
    value: function handleSelect(option) {
      var nextOptions;

      if (this.props.multiple) {
        if (this.isSelected(option)) {
          nextOptions = this.removeSelection(option);
        } else {
          nextOptions = this.addSelection(option);
        }
      } else {
        nextOptions = option.value;
      } // Set state if in uncontrolled mode


      if (!('value' in this.props)) {
        this.setState({
          value: nextOptions
        });
      }

      if (this.props.onChange) {
        this.props.onChange(nextOptions);
      }
    }
  }, {
    key: "isSelected",
    value: function isSelected(option) {
      return this.props.multiple ? this.state.value && this.state.value.indexOf(option.value) >= 0 : this.state.value === option.value;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _this$props$options = _this$props.options,
          options = _this$props$options === void 0 ? [] : _this$props$options,
          _this$props$multiple = _this$props.multiple,
          multiple = _this$props$multiple === void 0 ? false : _this$props$multiple,
          _this$props$disabled = _this$props.disabled,
          disabled = _this$props$disabled === void 0 ? false : _this$props$disabled,
          _this$props$invalid = _this$props.invalid,
          invalid = _this$props$invalid === void 0 ? false : _this$props$invalid,
          _this$props$required = _this$props.required,
          required = _this$props$required === void 0 ? false : _this$props$required,
          className = _this$props.className,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["options", "multiple", "disabled", "invalid", "required", "className"]);
      delete otherProps.onTab;
      delete otherProps.renderItem;
      return _react["default"].createElement(_List.List, (0, _extends2["default"])({
        className: className,
        "aria-multiselectable": multiple,
        "aria-disabled": disabled,
        "aria-invalid": invalid,
        "aria-required": required,
        selectable: true
      }, otherProps), this.renderListOfOptions(options));
    }
  }]);
  return SelectList;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /** Whether the SelectList is disabled */
  disabled: _propTypes["default"].bool,

  /** Whether to show the invalid icon and styling */
  invalid: _propTypes["default"].bool,

  /** Whether multiple options are able to be selected */
  multiple: _propTypes["default"].bool,

  /** Function called when the selected options are changed */
  onChange: _propTypes["default"].func,

  /** Array of strings of options in list */
  options: _propTypes["default"].arrayOf(_propTypes["default"].object),

  /** Whether an input is required */
  required: _propTypes["default"].bool,

  /** Array of pre-selected values*/
  value: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].string), _propTypes["default"].arrayOf(_propTypes["default"].number), _propTypes["default"].string, _propTypes["default"].number]),

  /**
   * A function that returns a wrapper component to render a list item label.
   * Useful in providing custom html to the rendered label.
   */
  renderItem: _propTypes["default"].func
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  options: [],
  multiple: false,
  disabled: false,
  invalid: false,
  required: false
}), _temp)) || _class;

exports["default"] = SelectList;