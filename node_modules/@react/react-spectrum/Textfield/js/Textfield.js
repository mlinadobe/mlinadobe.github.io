"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _class, _class2, _temp;

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/textfield/index.css");

  require("../../spectrum-css/textfield/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/textfield/index-lg.css");
} else {
  require("../../spectrum-css/textfield/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/textfield/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/textfield/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/textfield/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/textfield/multiStops/darkest.css");

var Textfield = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Textfield, _Component);

  function Textfield() {
    (0, _classCallCheck2["default"])(this, Textfield);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Textfield).apply(this, arguments));
  }

  (0, _createClass2["default"])(Textfield, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this = this;

      if (this.props.autoFocus) {
        // wait a frame to make sure the textfield in the DOM and focusable
        requestAnimationFrame(function () {
          return _this.focus();
        });
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      if (!this.props.disabled) {
        _reactDom["default"].findDOMNode(this).focus();
      }
    }
  }, {
    key: "onChange",
    value: function onChange(e) {
      if (this.props.onChange) {
        this.props.onChange(e.target.value, e);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          quiet = _this$props.quiet,
          disabled = _this$props.disabled,
          required = _this$props.required,
          invalid = _this$props.invalid,
          readOnly = _this$props.readOnly,
          multiLine = _this$props.multiLine,
          validationState = _this$props.validationState,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["className", "quiet", "disabled", "required", "invalid", "readOnly", "multiLine", "validationState"]);
      var Tag = multiLine ? 'textarea' : 'input';
      var isInvalid = invalid || validationState === 'invalid';
      delete otherProps.autoFocus;
      delete otherProps.autocompleteInput;

      if (invalid) {
        console.warn('The "invalid" prop of Textfield is deprecated. Please use validationState="invalid" instead.');
      }

      return _react["default"].createElement(Tag, (0, _extends2["default"])({
        type: "text",
        className: (0, _classnames["default"])('spectrum-Textfield', {
          'spectrum-Textfield--multiline': multiLine,
          'is-invalid': isInvalid,
          'is-valid': validationState === 'valid',
          'spectrum-Textfield--quiet': quiet
        }, className),
        disabled: disabled,
        required: required,
        readOnly: readOnly,
        "aria-invalid": isInvalid || null,
        defaultValue: otherProps.defaultValue
      }, (0, _filterDOMProps["default"])(otherProps), {
        onChange: this.onChange,
        rows: multiLine ? 1 : undefined
      }));
    }
  }]);
  return Textfield;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /** Whether to automatically focus this text field */
  autoFocus: _propTypes["default"].bool,

  /** Custom CSS class to add to the text field */
  className: _propTypes["default"].string,

  /** Whether to disable the text field */
  disabled: _propTypes["default"].bool,

  /** Whether to show the warning icon and red border. DEPRECATED: use validationState instead */
  invalid: _propTypes["default"].bool,

  /** Whether to render a textfield that accepts multiple lines of text */
  multiLine: _propTypes["default"].bool,

  /** Function called when focus is taken away from the text field */
  onBlur: _propTypes["default"].func,

  /** Function called when the text field value is changed */
  onChange: _propTypes["default"].func,

  /** Function called when focus is put on the text field */
  onFocus: _propTypes["default"].func,

  /** String to show in the text field when nothing has been input */
  placeholder: _propTypes["default"].string,

  /** Whether the text field should render using a quiet variant */
  quiet: _propTypes["default"].bool,

  /** Whether the text field can only be read */
  readOnly: _propTypes["default"].bool,

  /** Whether the text field requires user input (shows warning if empty) */
  required: _propTypes["default"].bool,

  /** Show either checkmark or warning icons */
  validationState: _propTypes["default"].oneOf(['valid', 'invalid'])
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  autoFocus: false,
  disabled: false,
  quiet: false,
  required: false,
  invalid: false,
  readOnly: false
}), _temp)) || _class;

exports["default"] = Textfield;
Textfield.displayName = 'Textfield';