"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Radio;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _SwitchBase = _interopRequireDefault(require("../../Switch/js/SwitchBase"));

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/radio/index.css");

  require("../../spectrum-css/radio/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/radio/index-lg.css");
} else {
  require("../../spectrum-css/radio/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/radio/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/radio/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/radio/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/radio/multiStops/darkest.css");

function Radio(_ref) {
  var className = _ref.className,
      labelBelow = _ref.labelBelow,
      quiet = _ref.quiet,
      otherProps = (0, _objectWithoutProperties2["default"])(_ref, ["className", "labelBelow", "quiet"]);
  return _react["default"].createElement(_SwitchBase["default"], (0, _extends2["default"])({
    inputType: "radio",
    className: (0, _classnames["default"])('spectrum-Radio', {
      'spectrum-Radio--labelBelow': labelBelow,
      'spectrum-Radio--quiet': quiet
    }, className),
    inputClassName: "spectrum-Radio-input",
    markClassName: "spectrum-Radio-button",
    labelClassName: "spectrum-Radio-label"
  }, otherProps));
}

Radio.displayName = 'Radio';
Radio.propTypes = {
  /**
   * Whether the radio should start off checked (controlled state)
   */
  checked: _propTypes["default"].bool,

  /**
   * Class given to radio
   */
  className: _propTypes["default"].string,

  /**
   * Whether the radio should be checked on mount
   */
  defaultChecked: _propTypes["default"].bool,

  /**
   * Displays the invalid state of this component
   */
  invalid: _propTypes["default"].bool,

  /**
   * Label for radio
   */
  label: _propTypes["default"].string,

  /**
   * Whether label is below radio
   */
  labelBelow: _propTypes["default"].bool,

  /**
   * Whether radio is a quiet variation
   */
  quiet: _propTypes["default"].bool,

  /**
   * Whether label is rendered
   */
  renderLabel: _propTypes["default"].bool
};