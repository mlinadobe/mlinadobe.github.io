"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _CoachMark = _interopRequireDefault(require("./CoachMark"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _class, _class2, _temp;

var FASTEST_SETINTERVAL_TIMEOUT = 10;

var CoachMarkIndicator = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(CoachMarkIndicator, _React$Component);

  function CoachMarkIndicator(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, CoachMarkIndicator);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(CoachMarkIndicator).call(this, props));
    _this.state = {
      style: {
        position: 'relative'
      }
    };
    _this.indicatorRef = null;
    _this.debouncedResizeUpdate = null;
    return _this;
  }

  (0, _createClass2["default"])(CoachMarkIndicator, [{
    key: "calculateDOMLocation",
    value: function calculateDOMLocation(targetNode) {
      var _targetNode$getBoundi = targetNode.getBoundingClientRect(),
          left = _targetNode$getBoundi.left,
          top = _targetNode$getBoundi.top,
          width = _targetNode$getBoundi.width,
          height = _targetNode$getBoundi.height;

      if (this.indicatorRef) {
        var _this$indicatorRef$ge = this.indicatorRef.getBoundingClientRect(),
            indicatorDiameter = _this$indicatorRef$ge.height;

        indicatorDiameter += _CoachMark["default"].INDICATOR_OFFSET;
        this.setState({
          style: {
            position: 'absolute',
            top: top + height / 2 - indicatorDiameter / 2,
            left: left + width / 2 - indicatorDiameter / 2
          }
        });
      }
    }
  }, {
    key: "resizeListener",
    value: function resizeListener() {
      var _this2 = this;

      if (!this.debouncedResizeUpdate) {
        this.debouncedResizeUpdate = setTimeout(function () {
          _this2.updateTargetNode();

          _this2.debouncedResizeUpdate = null;
        }, 50);
      }
    }
  }, {
    key: "updateTargetNode",
    value: function updateTargetNode() {
      if (this.indicatorRef) {
        var targetNode = document.querySelector(this.props.selector);

        if (targetNode) {
          this.calculateDOMLocation(targetNode);
        }

        return targetNode;
      }

      return null;
    }
  }, {
    key: "tryAttachToDOM",
    value: function tryAttachToDOM() {
      var _this3 = this;

      if (!this.updateTargetNode()) {
        var tryCount = 0;

        if (this.attachInterval) {
          this.clearAttachInterval();
        }

        this.attachInterval = setInterval(function () {
          if (_this3.updateTargetNode() || tryCount > 10) {
            _this3.clearAttachInterval();
          }

          tryCount++;
        }, FASTEST_SETINTERVAL_TIMEOUT);
      }
    }
  }, {
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.tryAttachToDOM();
                window.addEventListener('resize', this.resizeListener);

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }

      return componentDidMount;
    }()
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (prevProps.selector !== this.props.selector) {
        this.tryAttachToDOM();
      }

      if (prevState.style.top !== this.state.style.top || prevState.style.left !== this.state.style.left) {
        this.props.onPositioned();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.resizeListener);
      this.clearDebouncedResizeUpdateInterval();
      this.clearAttachInterval();
    }
  }, {
    key: "clearDebouncedResizeUpdateInterval",
    value: function clearDebouncedResizeUpdateInterval() {
      if (this.debouncedResizeUpdate) {
        clearTimeout(this.debouncedResizeUpdate);
        this.debouncedResizeUpdate = null;
      }
    }
  }, {
    key: "clearAttachInterval",
    value: function clearAttachInterval() {
      if (this.attachInterval) {
        clearInterval(this.attachInterval);
        this.attachInterval = null;
      }
    }
  }, {
    key: "setReference",
    value: function setReference(ref) {
      this.indicatorRef = ref;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          quiet = _this$props.quiet,
          onClick = _this$props.onClick,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["quiet", "onClick"]);
      var style = this.state.style;
      return _react["default"].createElement("div", (0, _extends2["default"])({
        className: (0, _classnames["default"])('spectrum-CoachMarkIndicator', {
          'spectrum-CoachMarkIndicator--quiet': quiet
        }),
        role: "presentation"
      }, otherProps, {
        onClick: onClick,
        ref: this.setReference,
        style: style
      }), _react["default"].createElement("div", {
        className: "spectrum-CoachMarkIndicator-ring"
      }), _react["default"].createElement("div", {
        className: "spectrum-CoachMarkIndicator-ring"
      }), _react["default"].createElement("div", {
        className: "spectrum-CoachMarkIndicator-ring"
      }));
    }
  }]);
  return CoachMarkIndicator;
}(_react["default"].Component), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /** The selector is used to select the element the coach mark should attach to.
   * Any valid element query that will only return 1 element
   **/
  selector: _propTypes["default"].string.isRequired,

  /** Quiet variant, uses a smaller indicator */
  quiet: _propTypes["default"].bool,

  /** Fires when the coachmark changes position  */
  onPositioned: _propTypes["default"].func
}), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  quiet: false,
  onPositioned: function onPositioned() {}
}), _temp)) || _class;

exports["default"] = CoachMarkIndicator;