"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _closest = _interopRequireDefault(require("dom-helpers/query/closest"));

var _CoachMarkIndicator = _interopRequireDefault(require("./CoachMarkIndicator"));

var _CoachMarkPopover = _interopRequireDefault(require("./CoachMarkPopover"));

var _OverlayTrigger = _interopRequireDefault(require("../../OverlayTrigger/js/OverlayTrigger"));

var _Portal = _interopRequireDefault(require("react-overlays/lib/Portal"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _class, _class2, _temp;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/coachmark/index.css");

  require("../../spectrum-css/coachmark/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/coachmark/index-lg.css");
} else {
  require("../../spectrum-css/coachmark/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/coachmark/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/coachmark/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/coachmark/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/coachmark/multiStops/darkest.css");

var CoachMark = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(CoachMark, _React$Component);

  function CoachMark(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, CoachMark);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(CoachMark).call(this, props));
    _this.state = {
      overlayContainer: null,
      indicatorPositioned: false
    };
    _this.shouldUpdatePosition = true;
    return _this;
  }

  (0, _createClass2["default"])(CoachMark, [{
    key: "getOverlayContainer",
    value: function getOverlayContainer() {
      if (this.node) {
        return (0, _closest["default"])(this.node, '.react-spectrum-provider') || document.body;
      }

      return null;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var overlayContainer = this.getOverlayContainer();

      if (overlayContainer) {
        this.setState({
          overlayContainer: overlayContainer
        });
      }
    }
  }, {
    key: "onHide",
    value: function onHide() {
      if (this.props.onHide) {
        this.props.onHide();
      }
    }
    /**
     * Because the indicator has to position itself based on its measured size
     * we'll already be a few renders in and the Overlay will be rendered
     * to the wrong position because the indicator isn't in place yet.
     * Once the indicator is in position, it'll emit this event. It'll also
     * emit it every following time, we want to for the Overlay trigger to
     * update the position only the once though, after that, the internals
     * of Overlay will take care of repositioning accurately.
     * This logic tells the state that the indicator has been positioned and we should
     * update to position of the Overlay.
     * There's also logic in componentDidUpdate to make sure it's only called once.
     **/

  }, {
    key: "onIndicatorPositioned",
    value: function onIndicatorPositioned() {
      if (!this.state.indicatorPositioned && this.shouldUpdatePosition) {
        this.setState({
          indicatorPositioned: true
        });
      }
    }
    /**
     * Once the indicator is positioned and we've run through a render
     * where we updated the Overlay, then we should no longer
     * need to force the Overlay to update its position.
     **/

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.state.indicatorPositioned) {
        this.shouldUpdatePosition = false;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          quiet = _this$props.quiet,
          selector = _this$props.selector,
          children = _this$props.children,
          dismissible = _this$props.dismissible,
          flip = _this$props.flip,
          placement = _this$props.placement,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["quiet", "selector", "children", "dismissible", "flip", "placement"]);
      var overlayContainer = this.state.overlayContainer;
      return _react["default"].createElement("div", {
        ref: function ref(node) {
          return _this2.node = node;
        },
        style: {
          display: 'none'
        }
      }, " ", overlayContainer && _react["default"].createElement(_Portal["default"], {
        container: overlayContainer
      }, _react["default"].createElement(_OverlayTrigger["default"], {
        trigger: dismissible ? 'click' : undefined,
        show: dismissible ? undefined : true // {undefined} will force OverlayTrigger to default to {defaultShow}
        ,
        defaultShow: true,
        flip: flip,
        placement: placement,
        offset: CoachMark.INDICATOR_OFFSET,
        onHide: this.onHide,
        shouldUpdatePosition: this.state.indicatorPositioned && this.shouldUpdatePosition
      }, _react["default"].createElement(_CoachMarkIndicator["default"], {
        selector: selector,
        quiet: quiet,
        onPositioned: this.onIndicatorPositioned
      }), _react["default"].createElement(_CoachMarkPopover["default"], otherProps, children))));
    }
  }]);
  return CoachMark;
}(_react["default"].Component), (0, _defineProperty2["default"])(_class2, "propTypes", _objectSpread({
  /**
   * Used by overlay trigger
   */
  parentNode: _propTypes["default"].any,

  /**
   * If there isn't enough space for the coachmark,
   * should it flip across the axis to try and get more space
   **/
  flip: _propTypes["default"].bool,

  /**
   * Relative to the target element, where should the coachmark render
   */
  placement: _propTypes["default"].oneOf(['bottom', 'bottom left', 'bottom right', 'top', 'top left', 'top right', 'right', 'right bottom', 'right top', 'left', 'left bottom', 'left top']),

  /**
   * If someone clicks off the coachmark, then it will hide/dismiss
   */
  dismissible: _propTypes["default"].bool
}, _CoachMarkPopover["default"].propTypes, {}, _CoachMarkIndicator["default"].propTypes)), (0, _defineProperty2["default"])(_class2, "defaultProps", _objectSpread({
  flip: true,
  placement: 'right'
}, _CoachMarkPopover["default"].defaultProps, {}, _CoachMarkIndicator["default"].defaultProps)), (0, _defineProperty2["default"])(_class2, "INDICATOR_OFFSET", 6), _temp)) || _class;

exports["default"] = CoachMark;