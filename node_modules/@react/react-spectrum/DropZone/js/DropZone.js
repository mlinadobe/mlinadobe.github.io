"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _class, _class2, _temp;

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/dropzone/index.css");

  require("../../spectrum-css/dropzone/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/dropzone/index-lg.css");
} else {
  require("../../spectrum-css/dropzone/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/dropzone/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/dropzone/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/dropzone/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/dropzone/multiStops/darkest.css");

var DropZone =
/**
 * A DropZone component is an area that accepts drag and drop of files and other objects.
 */
(0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(DropZone, _React$Component);

  function DropZone(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, DropZone);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(DropZone).call(this, props));
    _this.state = {
      draggingOver: false
    };
    _this.debouncedDragLeave = null;
    return _this;
  }

  (0, _createClass2["default"])(DropZone, [{
    key: "clearDebouncedDragLeave",
    value: function clearDebouncedDragLeave() {
      if (this.debouncedDragLeave) {
        clearTimeout(this.debouncedDragLeave);
        this.debouncedDragLeave = null;
      }
    }
  }, {
    key: "onDragOver",
    value: function onDragOver(e) {
      if (this.props.shouldAccept && !this.props.shouldAccept(e)) {
        e.dataTransfer.dropEffect = 'none';
        return;
      }

      e.preventDefault();
      this.clearDebouncedDragLeave();

      if (!this.state.draggingOver) {
        this.setState({
          draggingOver: true
        });
      }

      e.dataTransfer.dropEffect = this.props.dropEffect;

      if (this.props.onDragOver) {
        this.props.onDragOver(e);
      }
    }
  }, {
    key: "onDragLeave",
    value: function onDragLeave(e) {
      var _this2 = this;

      this.clearDebouncedDragLeave();
      this.debouncedDragLeave = setTimeout(function () {
        if (_this2.state.draggingOver) {
          _this2.setState({
            draggingOver: false
          });
        }

        if (_this2.props.onDragLeave) {
          _this2.props.onDragLeave(e);
        }
      }, 100);
    }
  }, {
    key: "onDrop",
    value: function onDrop(e) {
      e.preventDefault();
      this.clearDebouncedDragLeave();

      if (this.state.draggingOver) {
        this.setState({
          draggingOver: false
        });
      }

      if (this.props.onDrop) {
        this.props.onDrop(e);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["children", "className"]);
      return _react["default"].createElement("div", (0, _extends2["default"])({}, (0, _filterDOMProps["default"])(otherProps), {
        className: (0, _classnames["default"])('spectrum-Dropzone', {
          'is-dragged': this.state.draggingOver
        }, className),
        onDrop: this.onDrop,
        onDragOver: this.onDragOver,
        onDragLeave: this.onDragLeave
      }), children);
    }
  }]);
  return DropZone;
}(_react["default"].Component), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  dropEffect: 'copy'
}), (0, _defineProperty2["default"])(_class2, "propTypes", {
  /**
   * Controls the cursor displayed when dragging over the drop zone
   * This is the standard DataTransfer.dropEffect https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/dropEffect
   * and also affects what the target will accept.
   */
  dropEffect: _propTypes["default"].oneOf(['copy', 'move', 'link', 'none']),

  /**
   * A function that should return a boolean indicating whether a drop is accepted
   */
  shouldAccept: _propTypes["default"].func,

  /**
   * A callback that is called when dragging leaves the drop zone
   */
  onDragLeave: _propTypes["default"].func,

  /**
   * A callback that is called when dragging over the drop zone
   */
  onDragOver: _propTypes["default"].func,

  /**
   * A callback that is called when a drop occurs
   */
  onDrop: _propTypes["default"].func,

  /**
   * Custom className to apply to this component
   */
  className: _propTypes["default"].string
}), _temp)) || _class;

exports["default"] = DropZone;