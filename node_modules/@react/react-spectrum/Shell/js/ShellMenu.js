"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _transition = require("../../utils/transition");

var _Portal = _interopRequireDefault(require("react-overlays/lib/Portal"));

var _react = _interopRequireWildcard(require("react"));

var _RootCloseWrapper = _interopRequireDefault(require("react-overlays/lib/RootCloseWrapper"));

require("../style/ShellMenu.css");

var _class, _class2, _temp;

var ShellMenu = (0, _convertUnsafeMethod["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(ShellMenu, _Component);

  function ShellMenu(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, ShellMenu);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ShellMenu).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleTransitionEnd", function (e) {
      if (e.propertyName !== 'transform') {
        return;
      }

      var _this$props = _this.props,
          onVisible = _this$props.onVisible,
          onHidden = _this$props.onHidden;
      var open = _this.state.open;

      if (open) {
        onVisible();
      } else {
        onHidden();
      }

      _this.setState({
        visible: open
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleMenuToggle", function (e) {
      var open = _this.state.open;

      if (open) {
        _this.handleMenuClose(e);
      } else {
        _this.handleMenuOpen(e);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleTargetClick", function (e) {
      var open = _this.state.open; // If it's already open, close it.

      if (open) {
        _this.handleMenuClose();
      } else {
        _this.handleMenuOpen();
      }

      e.preventDefault();
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleMenuOpen", function () {
      var _this$props2 = _this.props,
          onOpen = _this$props2.onOpen,
          index = _this$props2.index;

      _this.setOpen(true);

      onOpen(index);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleMenuClose", function () {
      var _this$props3 = _this.props,
          onClose = _this$props3.onClose,
          index = _this$props3.index;

      _this.setOpen(false);

      onClose(index);
    });
    var _open = props.open,
        defaultOpen = props.defaultOpen;
    _this.state = {
      open: _open !== undefined ? _open : defaultOpen,
      visible: false
    };
    return _this;
  }

  (0, _createClass2["default"])(ShellMenu, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ('open' in nextProps) {
        this.setState({
          open: nextProps.open
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.menuRef) {
        this.menuRef.removeEventListener((0, _transition.getTransitionEvent)(), this.handleTransitionEnd);
      }
    }
  }, {
    key: "bindMenuRef",
    value: function bindMenuRef(ref) {
      if (this.menuRef) {
        this.menuRef.removeEventListener((0, _transition.getTransitionEvent)(), this.handleTransitionEnd);
      }

      this.menuRef = ref;

      if (this.menuRef) {
        this.menuRef.addEventListener((0, _transition.getTransitionEvent)(), this.handleTransitionEnd);
      }
    }
  }, {
    key: "setOpen",
    value: function setOpen(open) {
      if (!('open' in this.props)) {
        this.setState({
          open: open
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props4 = this.props,
          placement = _this$props4.placement,
          animateFrom = _this$props4.animateFrom,
          full = _this$props4.full,
          dark = _this$props4.dark,
          top = _this$props4.top,
          target = _this$props4.target,
          children = _this$props4.children;
      var _this$state = this.state,
          open = _this$state.open,
          visible = _this$state.visible;
      var zIndex;

      if (open) {
        zIndex = top ? 10018 : 10015;
      } else {
        zIndex = top ? 10017 : 10010;
      }

      return _react["default"].createElement("span", null, _react["default"].createElement("span", {
        ref: function ref(el) {
          _this2.targetRef = el;
        }
      }, _react["default"].cloneElement(target, {
        onClick: this.handleTargetClick
      })), _react["default"].createElement(_Portal["default"], null, _react["default"].createElement(_RootCloseWrapper["default"], {
        onRootClose: this.handleMenuClose,
        disabled: !open
      }, _react["default"].createElement("div", {
        ref: function ref(el) {
          _this2.bindMenuRef(el);
        },
        style: {
          zIndex: zIndex
        },
        className: (0, _classnames["default"])('coral3-Shell-menu', "coral3-Shell-menu--placement-".concat(placement), "coral3-Shell-menu--from-".concat(animateFrom), {
          'coral3-Shell-menu--full': full,
          'is-open': open,
          'coral--dark': dark,
          'is-visible': open || visible
        })
      }, children))));
    }
  }]);
  return ShellMenu;
}(_react.Component), (0, _defineProperty2["default"])(_class2, "defaultProps", {
  defaultOpen: false,
  placement: 'right',
  // top, right
  animateFrom: 'right',
  // top, right
  full: false,
  dark: false,
  top: false,
  // if true, appears on top of the other menus
  onOpen: function onOpen() {},
  onClose: function onClose() {},
  onVisible: function onVisible() {},
  onHidden: function onHidden() {}
}), _temp)) || _class;

exports["default"] = ShellMenu;
ShellMenu.displayName = 'ShellMenu';